[
  {
    "Name": "C# Model Class (Scriban)",
    "Description": "Generates a C# POCO class from a table using Scriban templates.",
    "Template": "// Generated by {{ ProgramName }}\nnamespace {{ NameSpace }}\n{\n    public class {{ ClassName }}\n    {\n        {{ for col in SelectedColumns -}}\n        public {{ map_db_type_to_csharp col.DataType }}{{ if col.IsNullable && map_db_type_to_csharp col.DataType != \"string\" && map_db_type_to_csharp col.DataType != \"byte[]\"}}?{{end}} {{ normalize_property_name col.ColumnName }} { get; set; }\n        {{ end -}}\n    }\n}",
    "SnippetType": "SingleTable",
    "IsUserDefined": false
  },
  {
    "Name": "Blazor EditForm Inputs (Scriban)",
    "Description": "Generates InputText fields for a Blazor EditForm using Scriban.",
    "Template": "{{ for col in SelectedColumns }}\n    <div class=\"form-group\">\n        <label for=\"{{ normalize_property_name col.ColumnName | string.downcase }}\">{{ normalize_property_name col.ColumnName }}:</label>\n        <InputText id=\"{{ normalize_property_name col.ColumnName | string.downcase }}\" class=\"form-control\" @bind-Value=\"Model.{{ normalize_property_name col.ColumnName }}\" />\n        <ValidationMessage For=\"@(() => Model.{{ normalize_property_name col.ColumnName }})\" />\n    </div>\n{{ end }}",
    "SnippetType": "SingleTable",
    "IsUserDefined": false
  },
  {
    "Name": "Simple Console Output (Scriban)",
    "Description": "Prints table and column names to console using Scriban.",
    "Template": "Console.WriteLine(\"Table: {{ TableName }}\");\n{{ for col in SelectedColumns }}\nConsole.WriteLine(\"  Column: {{ col.ColumnName }} - Type: {{ col.DataType }}\");\n{{ end }}",
    "SnippetType": "SingleTable",
    "IsUserDefined": false
  },
  {
    "Name": "C# Get All Service Method (EF Core) (Scriban)",
    "Description": "Generates a C# method to get all records (Scriban).",
    "Template": "// Generated by {{ ProgramName }}\nnamespace {{ NameSpace }}\n{\n    public async Task<List<{{ ClassName }}>> GetAll{{ ClassName }}sAsync()\n    {\n        // Assuming _dbContext is an instance of your Entity Framework Core DbContext\n        // and has a DbSet<{{ ClassName }}> named {{ ClassName }}s (e.g., public DbSet<User> Users { get; set; })\n        return await _dbContext.{{ ClassName }}s.ToListAsync();\n    }\n}",
    "SnippetType": "SingleTable",
    "IsUserDefined": false
  },
  {
    "Name": "Multi-Table: Master-Detail C# POCOs",
    "Description": "Generates C# POCO classes for a master table (Tables[0]) and a detail table (Tables[1]). Assumes Tables[0] is master and Tables[1] is detail. Master class includes a List<DetailClass>.",
    "SnippetType": "MultiTableMasterDetail",
    "Template": "// Generated by {{ ProgramName }}\n// Master Table: {{ Tables[0].TableName }} (Alias: {{ Tables[0].UserAlias }})\n// Detail Table: {{ Tables[1].TableName }} (Alias: {{ Tables[1].UserAlias }})\nnamespace {{ NameSpace }};\n\npublic class {{ Tables[0].ClassName }} // Master Class\n{\n    {{ for col in Tables[0].SelectedColumns -}}\n    public {{ map_db_type_to_csharp col.DataType }}{{ if col.IsNullable && map_db_type_to_csharp col.DataType != \"string\" && map_db_type_to_csharp col.DataType != \"byte[]\"}}?{{end}} {{ normalize_property_name col.ColumnName }} { get; set; }\n    {{ end -}}\n    \n    public List<{{ Tables[1].ClassName }}> {{ Tables[1].ClassName }}s { get; set; } // Detail List\n\n    public {{ Tables[0].ClassName }}()\n    {\n        {{ Tables[1].ClassName }}s = new List<{{ Tables[1].ClassName }}>();\n    }\n}\n\npublic class {{ Tables[1].ClassName }} // Detail Class\n{\n    {{ for col in Tables[1].SelectedColumns -}}\n    public {{ map_db_type_to_csharp col.DataType }}{{ if col.IsNullable && map_db_type_to_csharp col.DataType != \"string\" && map_db_type_to_csharp col.DataType != \"byte[]\"}}?{{end}} {{ normalize_property_name col.ColumnName }} { get; set; }\n    {{ end -}}\n}",
    "IsUserDefined": false
  },
  {
    "Name": "Multi-Table: SQL SELECT with JOINs (Conceptual)",
    "Description": "Generates a conceptual SQL SELECT statement joining two tables (Tables[0] and Tables[1]) on a placeholder condition. Shows column and alias usage.",
    "SnippetType": "MultiTableJoin",
    "Template": "-- SQL Query generated by {{ ProgramName }}\n-- Tables involved:\n--   1. {{ Tables[0].TableName }} (Alias: {{ Tables[0].UserAlias }})\n--   2. {{ Tables[1].TableName }} (Alias: {{ Tables[1].UserAlias }})\n-- Note: You'll need to define the JOIN condition and select appropriate columns.\n\nSELECT\n    {{ for col in Tables[0].SelectedColumns -}}\n    {{ Tables[0].UserAlias }}.{{ col.ColumnName }} AS {{ normalize_property_name (Tables[0].UserAlias + \"_\" + col.ColumnName) }},\n    {{ end -}}\n    {{ for col in Tables[1].SelectedColumns -}}\n    {{ Tables[1].UserAlias }}.{{ col.ColumnName }} AS {{ normalize_property_name (Tables[1].UserAlias + \"_\" + col.ColumnName) }}{{ if !for.last || Tables[0].SelectedColumns.size > 0 %}},{{% endif %}}\n    {{ end -}}\n    -- Add more columns as needed\nFROM\n    {{ Tables[0].TableName }} AS {{ Tables[0].UserAlias }}\nINNER JOIN\n    {{ Tables[1].TableName }} AS {{ Tables[1].UserAlias }}\n        ON {{ Tables[0].UserAlias }}.[ForeignKeyColumn] = {{ Tables[1].UserAlias }}.[PrimaryKeyColumn] -- <<< IMPORTANT: Replace with actual JOIN condition columns\n\nWHERE\n    -- Add your conditions here\n    1=1;\n\n-- Example of accessing columns for Master (Tables[0]):\n-- {{ for col in Tables[0].SelectedColumns }}{{ Tables[0].UserAlias }}.{{ col.ColumnName }} ({{ col.DataType }})\n-- {{ end }}\n-- Example of accessing columns for Detail (Tables[1]):\n-- {{ for col in Tables[1].SelectedColumns }}{{ Tables[1].UserAlias }}.{{ col.ColumnName }} ({{ col.DataType }})\n-- {{ end }}",
    "IsUserDefined": false
  }
]
