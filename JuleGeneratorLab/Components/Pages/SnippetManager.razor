@page "/snippetmanager"
@using JuleGeneratorLab.Models
@using JuleGeneratorLab.Services
@using System.Text
@inject CodeSnippetService SnippetService
@inject IJSRuntime JSRuntime

<h3>Code Snippet Manager</h3>

<div class="row my-3 align-items-center">
    <div class="col-md-auto">
        <button class="btn btn-primary" @onclick="ShowCreateForm">Create New Snippet</button>
    </div>
    <div class="col-md-auto ms-md-auto">
        <div class="btn-group" role="group" aria-label="Import/Export actions">
            <button class="btn btn-outline-secondary" @onclick="DownloadUserSnippetsAsync">
                <i class="bi bi-download"></i> Download User Snippets
            </button>
            <label class="btn btn-outline-secondary mb-0">
                <i class="bi bi-upload"></i> Upload User Snippets
                <InputFile OnChange="HandleFileUploadAsync" accept=".json" class="d-none" />
            </label>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(feedbackMessage))
{
    <div class="alert alert-@feedbackMessageType alert-dismissible fade show" role="alert">
        @feedbackMessage
        <button type="button" class="btn-close" @onclick="ClearFeedbackMessage"></button>
    </div>
}

@if (snippets == null)
{
    <p><em>Loading snippets...</em></p>
}
else if (!snippets.Any())
{
    <p>No snippets found. Create your first one!</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Type</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var snippet in snippets)
            {
                <tr>
                    <td>@snippet.Name</td>
                    <td>
                        <div style="max-height: 100px; overflow-y: auto; white-space: pre-wrap; word-break: break-word;">
                            @snippet.Description
                        </div>
                    </td>
                    <td>
                        @if (snippet.IsUserDefined)
                        {
                            <span class="badge bg-success">User</span>
                        }
                        else
                        {
                            <span class="badge bg-info">Default</span>
                        }
                    </td>
                    <td>
                        <button class="btn btn-sm btn-outline-secondary me-1" @onclick="() => ViewSnippet(snippet)">View</button>
                        @if (snippet.IsUserDefined)
                        {
                            <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => ShowEditForm(snippet)">Edit</button>
                            <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDeleteSnippet(snippet)">Delete</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Modal for Viewing Snippet Template -->
@if (viewingSnippet != null)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">View Snippet: @viewingSnippet.Name</h5>
                    <button type="button" class="btn-close" @onclick="CloseViewModal"></button>
                </div>
                <div class="modal-body">
                    <pre style="max-height: 400px; overflow-y: auto; background-color: #f8f9fa; border: 1px solid #dee2e6; padding: 10px; border-radius: 4px;"><code>@viewingSnippet.Template</code></pre>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseViewModal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Create/Edit Form Modal -->
@if (showEditOrCreateForm && currentEditSnippet != null)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.4);">
        <div class="modal-dialog modal-xl"> <!-- Changed to modal-xl -->
            <div class="modal-content">
                <EditForm Model="currentEditSnippet" OnValidSubmit="HandleSaveSnippet">
                    <DataAnnotationsValidator />
                    <div class="modal-header">
                        <h5 class="modal-title">@(currentEditSnippet.IsUserDefined && !string.IsNullOrEmpty(originalSnippetNameForEdit) ? "Edit" : "Create") Snippet</h5>
                        <button type="button" class="btn-close" @onclick="CloseEditOrCreateForm"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-8"> {/* Form fields column */}
                                <div class="mb-3">
                                    <label for="snippetName" class="form-label">Name:</label>
                                    <InputText id="snippetName" class="form-control" @bind-Value="currentEditSnippet.Name" />
                                    <ValidationMessage For="@(() => currentEditSnippet.Name)" />
                                </div>
                                <div class="mb-3">
                                    <label for="snippetDescription" class="form-label">Description:</label>
                                    <InputTextArea id="snippetDescription" class="form-control" @bind-Value="currentEditSnippet.Description" rows="2" />
                                    <ValidationMessage For="@(() => currentEditSnippet.Description)" />
                                </div>
                                <div class="mb-3">
                                    <label for="snippetTemplate" class="form-label">Template:</label>
                                    <InputTextArea id="snippetTemplateArea" class="form-control" @bind-Value="currentEditSnippet.Template" rows="20" style="font-family: monospace; white-space: pre;" />
                                    <ValidationMessage For="@(() => currentEditSnippet.Template)" />
                                </div>
                            </div>
                            <div class="col-md-4"> {/* Help panel column */}
                                <div class="p-3 bg-light border rounded" style="font-size: 0.875rem; max-height: calc(100vh - 250px); overflow-y: auto;">
                                    <h6>Quick Reference & Insert</h6>
                                    <hr class="my-2">

                                    <p class="mb-1"><strong>Global Variables:</strong></p>
                                    <div class="mb-2 btn-group-vertical w-100" role="group">
                                        <button type="button" class="btn btn-sm btn-outline-primary text-start" @onclick='() => InsertTextIntoTemplateAsync("{{ TableName }}")'><code>{{ TableName }}</code></button>
                                        <button type="button" class="btn btn-sm btn-outline-primary text-start" @onclick='() => InsertTextIntoTemplateAsync("{{ ClassName }}")'><code>{{ ClassName }}</code></button>
                                        <button type="button" class="btn btn-sm btn-outline-primary text-start" @onclick='() => InsertTextIntoTemplateAsync("{{ for col in SelectedColumns }}\n  {{ col.ColumnName }}\n{{ end }}")'>Loop <code>{{ SelectedColumns }}</code></button>
                                    </div>

                                    <p class="mb-1"><strong>Column Properties</strong> (inside loop):</p>
                                    <div class="mb-2 btn-group-vertical w-100" role="group">
                                        <button type="button" class="btn btn-sm btn-outline-secondary text-start" @onclick='() => InsertTextIntoTemplateAsync("{{ col.ColumnName }}")'><code>{{ col.ColumnName }}</code></button>
                                        <button type="button" class="btn btn-sm btn-outline-secondary text-start" @onclick='() => InsertTextIntoTemplateAsync("{{ col.DataType }}")'><code>{{ col.DataType }}</code></button>
                                        <button type="button" class="btn btn-sm btn-outline-secondary text-start" @onclick='() => InsertTextIntoTemplateAsync("{{ col.IsPrimaryKey }}")'><code>{{ col.IsPrimaryKey }}</code></button>
                                        <button type="button" class="btn btn-sm btn-outline-secondary text-start" @onclick='() => InsertTextIntoTemplateAsync("{{ col.IsNullable }}")'><code>{{ col.IsNullable }}</code></button>
                                    </div>

                                    <p class="mb-1"><strong>Custom Functions:</strong></p>
                                    <div class="mb-2 btn-group-vertical w-100" role="group">
                                        <button type="button" class="btn btn-sm btn-outline-success text-start" @onclick='() => InsertTextIntoTemplateAsync("{{ normalize_property_name col.ColumnName }}")'><code>normalize_property_name</code></button>
                                        <button type="button" class="btn btn-sm btn-outline-success text-start" @onclick='() => InsertTextIntoTemplateAsync("{{ map_db_type_to_csharp col.DataType }}")'><code>map_db_type_to_csharp</code></button>
                                    </div>

                                    <hr class="my-2">
                                    <p class="small">Click buttons to insert placeholders. For full details, see <a href="https://github.com/scriban/scriban/blob/master/doc/language.md" target="_blank">Scriban docs</a> and the "Template Authoring Help" section below.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseEditOrCreateForm">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    @if(showEditOrCreateForm) { <div class="modal-backdrop fade show"></div> }
}

        <div class="mt-5 p-3 border rounded bg-light">
            <h4>Template Authoring Help (Scriban Syntax)</h4>
            <p>This generator uses the <a href="https://github.com/scriban/scriban/blob/master/doc/language.md" target="_blank">Scriban templating language</a>. Here are the basics to get you started:</p>

            <h5>1. Accessing Data</h5>
            <p>You have access to the following global objects and variables in your templates:</p>
            <ul>
                <li><code><strong>{{ TableName }}</strong></code>: (String) The raw name of the selected database table (e.g., "SalesOrderHeader").</li>
                <li><code><strong>{{ ClassName }}</strong></code>: (String) A normalized version of the table name, suitable for use as a C# class name (e.g., "SalesOrderHeader").</li>
                <li><code><strong>{{ SelectedColumns }}</strong></code>: (List) A list of the columns you selected from the table. Each item in this list is a 'column' object.</li>
            </ul>
            <p>Each <code>column</code> object in <code>SelectedColumns</code> has the following properties (accessible like <code>{{ col.PropertyName }}</code> inside a loop):</p>
            <ul>
                <li><code><strong>ColumnName</strong></code>: (String) The original name of the column (e.g., "order_date").</li>
                <li><code><strong>DataType</strong></code>: (String) The database data type of the column (e.g., "datetime", "nvarchar").</li>
                <li><code><strong>IsPrimaryKey</strong></code>: (Boolean) True if the column is part of the primary key, false otherwise.</li>
                <li><code><strong>IsNullable</strong></code>: (Boolean) True if the column allows NULL values, false otherwise.</li>
            </ul>

            <h5>2. Basic Syntax</h5>
            <ul>
                <li><strong>Outputting values:</strong> Use double curly braces: <code>@("{{ ClassName }}")</code> or <code>@("{{ col.ColumnName }}")</code>.</li>
                <li><strong>Comments:</strong> Use <code>@("{{# This is a comment #}}")</code> or <code>@("{{## ... multi-line ... ##}}")</code>. (Note: Scriban's default might be <code>@("##")</code> for single line. Check docs for details.) Text outside <code>@("{{ ... }}")</code> is literal.</li>
            </ul>

            <h5>3. Loops</h5>
            <p>To iterate over the selected columns:</p>
            <pre><code>{{ for col in SelectedColumns }}
    // Access column properties here:
    Column: {{ col.ColumnName }}, Type: {{ col.DataType }}
    {{ if col.IsPrimaryKey }} (Primary Key){{ end }}
{{ end }}</code></pre>

            <h5>4. Conditionals</h5>
            <p>To include content based on a condition:</p>
            <pre><code>{{ if col.IsNullable }}
    This column ({{ col.ColumnName }}) can be null.
{{ else }}
    This column ({{ col.ColumnName }}) is NOT NULL.
{{ end }}</code></pre>
            <p>You can also use <code>else if</code>.</p>

            <h5>5. Custom Functions</h5>
            <p>The following C# helper functions are available for use in your templates:</p>
            <ul>
                <li><code><strong>normalize_property_name(string)</strong></code>: Converts a database column name (e.g., "user_id") to a C# style property name (e.g., "UserId").
                    <br/>Usage: <code>{{ normalize_property_name col.ColumnName }}</code></li>
                <li><code><strong>map_db_type_to_csharp(string)</strong></code>: Maps a database data type string (e.g., "nvarchar", "int") to its corresponding C# type string (e.g., "string", "int").
                    <br/>Usage: <code>{{ map_db_type_to_csharp col.DataType }}</code></li>
            </ul>
            <p>You can use these with the pipe character <code>|</code> for chaining, though direct function call syntax is often clearer for these specific custom functions: <code>{{ map_db_type_to_csharp col.DataType }}</code> is generally preferred over <code>{{ col.DataType | map_db_type_to_csharp }}</code> for clarity, but both might work depending on exact registration in Scriban.</p>

            <h5>6. Scriban Built-in Functions</h5>
            <p>Scriban provides many <a href="https://github.com/scriban/scriban/blob/master/doc/builtins.md" target="_blank">built-in functions</a>, especially for string manipulation, math, dates, etc. For example:</p>
            <ul>
                <li><code>string.capitalize</code>, <code>string.downcase</code>, <code>string.upcase</code></li>
                <li><code>string.replace input_string pattern replacement_string</code></li>
                <li><code>string.contains input_string substring_to_find</code></li>
            </ul>
            <p>Example: <code>{{ col.ColumnName | string.downcase }}</code> or <code>{{ string.replace col.ColumnName "_" "" }}</code></p>

            <h5>Example: Generating a C# Property</h5>
            <pre><code>{{ for col in SelectedColumns }}
    public {{ map_db_type_to_csharp col.DataType }} {{ normalize_property_name col.ColumnName }} { get; set; }{{ if col.IsNullable && !(map_db_type_to_csharp col.DataType == "string" || map_db_type_to_csharp col.DataType == "byte[]" || map_db_type_to_csharp col.DataType == "object") }}?{{ end }}
{{ end }}</code></pre>
            <p class="small text-muted">This example also shows a conditional for adding a '?' for nullable reference types in C#.</p>
</div>

@code {
    private List<CodeSnippet>? snippets;
    private CodeSnippet? viewingSnippet; // For view modal
    private CodeSnippet? currentEditSnippet; // For edit form
    private bool showEditOrCreateForm = false;
    private string? originalSnippetNameForEdit; // To keep track of the name before editing

    private string? feedbackMessage;
    private string feedbackMessageType = "info"; // e.g., "success", "danger", "warning"

    protected override async Task OnInitializedAsync()
    {
        await LoadSnippetsAsync();
    }

    private async Task LoadSnippetsAsync()
    {
        await SnippetService.EnsureInitializedAsync(); // Ensure service is ready
        snippets = SnippetService.Snippets.OrderBy(s => s.Name).ToList();
        StateHasChanged(); // Notify Blazor to re-render
    }

    private void ShowCreateForm()
    {
        originalSnippetNameForEdit = null; // Clear it for new snippet
        currentEditSnippet = new CodeSnippet { IsUserDefined = true, Name = "New Snippet", Description = "A new user-defined snippet.", Template = "// Start your template here" };
        showEditOrCreateForm = true;
    }

    private void ShowEditForm(CodeSnippet snippetToEdit)
    {
        originalSnippetNameForEdit = snippetToEdit.Name; // Store original name
        currentEditSnippet = new CodeSnippet // Create a copy for editing
        {
            Name = snippetToEdit.Name,
            Description = snippetToEdit.Description,
            Template = snippetToEdit.Template,
            IsUserDefined = snippetToEdit.IsUserDefined // Should be true
        };
        showEditOrCreateForm = true;
    }

    private void CloseEditOrCreateForm()
    {
        showEditOrCreateForm = false;
        currentEditSnippet = null;
        originalSnippetNameForEdit = null; // Clear this too
    }

    private async Task HandleSaveSnippet()
    {
        if (currentEditSnippet == null) return;

        // Basic validation (name required) - DataAnnotationsValidator handles more
        if (string.IsNullOrWhiteSpace(currentEditSnippet.Name))
        {
            // Optionally show a message, though DA Validator should handle it
            return;
        }

        if (string.IsNullOrEmpty(originalSnippetNameForEdit) || !originalSnippetNameForEdit.Equals(currentEditSnippet.Name, StringComparison.OrdinalIgnoreCase))
        {
            // This is a new snippet or a rename. Check if name already exists among user snippets.
            var existingUserSnippet = SnippetService.Snippets.FirstOrDefault(s => s.IsUserDefined && s.Name.Equals(currentEditSnippet.Name, StringComparison.OrdinalIgnoreCase));
            if (existingUserSnippet != null)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"A user-defined snippet with the name '{currentEditSnippet.Name}' already exists. Please choose a different name.");
                return;
            }
        }

        if (string.IsNullOrEmpty(originalSnippetNameForEdit)) // It's a new snippet
        {
            await SnippetService.AddUserSnippetAsync(currentEditSnippet);
        }
        else // It's an existing snippet being edited
        {
            await SnippetService.UpdateUserSnippetAsync(originalSnippetNameForEdit, currentEditSnippet);
        }

        CloseEditOrCreateForm();
        await LoadSnippetsAsync(); // Refresh the list
    }

    private async Task ConfirmDeleteSnippet(CodeSnippet snippetToDelete)
    {
        if (!snippetToDelete.IsUserDefined) return; // Should not happen due to UI guards

        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the snippet '{snippetToDelete.Name}'?");
        if (confirmed)
        {
            await SnippetService.DeleteUserSnippetAsync(snippetToDelete.Name);
            await LoadSnippetsAsync(); // Refresh the list
        }
    }

    private void ViewSnippet(CodeSnippet snippetToView)
    {
        viewingSnippet = snippetToView;
    }

    private void CloseViewModal()
    {
        viewingSnippet = null;
    }

    private void ClearFeedbackMessage()
    {
        feedbackMessage = null;
    }

    private async Task DownloadUserSnippetsAsync()
    {
        ClearFeedbackMessage();
        try
        {
            string jsonString = await SnippetService.GetUserSnippetsAsJsonAsync();
            if (string.IsNullOrWhiteSpace(jsonString) || jsonString == "[]")
            {
                feedbackMessage = "No user-defined snippets to download.";
                feedbackMessageType = "warning";
                return;
            }

            var fileName = "user_snippets.json";
            var base64 = Convert.ToBase64String(Encoding.UTF8.GetBytes(jsonString));

            // Using the existing saveAsFile JS function, ensure it's globally available or in a shared JS file.
            // For JSON, the mime type should be application/json.
            await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, $"data:application/json;base64,{base64}");

            feedbackMessage = "User snippets download initiated.";
            feedbackMessageType = "success";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading user snippets: {ex.Message}");
            feedbackMessage = $"Error downloading snippets: {ex.Message}";
            feedbackMessageType = "danger";
        }
        StateHasChanged();
    }

    private async Task HandleFileUploadAsync(InputFileChangeEventArgs e)
    {
        ClearFeedbackMessage();
        var file = e.File;
        if (file == null)
        {
            feedbackMessage = "No file selected.";
            feedbackMessageType = "warning";
            StateHasChanged();
            return;
        }

        // Basic validation for file type (extension)
        if (!file.Name.EndsWith(".json", StringComparison.OrdinalIgnoreCase))
        {
            feedbackMessage = "Invalid file type. Please upload a .json file.";
            feedbackMessageType = "danger";
            StateHasChanged();
            return;
        }

        // Max file size (e.g., 5MB) - adjust as needed
        long maxFileSize = 5 * 1024 * 1024;
        if (file.Size > maxFileSize)
        {
            feedbackMessage = $"File size exceeds the limit of {maxFileSize / (1024*1024)}MB.";
            feedbackMessageType = "danger";
            StateHasChanged();
            return;
        }

        try
        {
            // Read the file content
            // Requesting a stream and reading from it is more memory efficient for larger files.
            await using var stream = file.OpenReadStream(maxFileSize);
            using var reader = new StreamReader(stream);
            string jsonContent = await reader.ReadToEndAsync();

            bool success = await SnippetService.LoadUserSnippetsFromJsonAsync(jsonContent);

            if (success)
            {
                await LoadSnippetsAsync(); // Refresh the snippet list in the UI
                feedbackMessage = "User snippets uploaded and loaded successfully.";
                feedbackMessageType = "success";
            }
            else
            {
                feedbackMessage = "Failed to load snippets from the file. It might be corrupted or not in the correct format.";
                feedbackMessageType = "danger";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error uploading user snippets: {ex.Message}");
            feedbackMessage = $"Error uploading snippets: {ex.Message}";
            feedbackMessageType = "danger";
        }
        StateHasChanged();
    }

    private async Task InsertTextIntoTemplateAsync(string textToInsert)
    {
        if (currentEditSnippet != null) // Ensure we are editing
        {
            await JSRuntime.InvokeVoidAsync("textUtils.insertTextAtCursor", "snippetTemplateArea", textToInsert);
        }
    }
}
