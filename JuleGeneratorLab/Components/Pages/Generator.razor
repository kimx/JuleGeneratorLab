@page "/generator"
@using JuleGeneratorLab.Services
@using JuleGeneratorLab.Models
@inject DatabaseSchemaReader DbSchemaReader
@inject CodeSnippetService SnippetService
@inject CodeGenerationService CodeGenService
@inject IJSRuntime JSRuntime
@inject ProjectService ProjectSvc
@inject DatabaseConnectionService DbConnectionSvc
@inject SnippetSetService SnippetSetSvc

<h3>Code Generator</h3>

<div class="container-fluid">
    <!-- Row 0: Project Selection -->
    <div class="row p-2 my-2 border rounded">
        <div class="col-12">
            <h4>Project Selection</h4>
            @if (availableProjects == null)
            {
                <p><em>Loading projects...</em></p>
            }
            else if (!availableProjects.Any())
            {
                <p>No projects available. Please create a project in the Project Manager.</p>
            }
            else
            {
                <div class="row">
                    <div class="col-md-6">
                        <label for="projectSelector" class="form-label">Select Project:</label>
                        <InputSelect id="projectSelector" class="form-select" @bind-Value="selectedProjectId">
                            <option value="">-- Select a Project --</option>
                            @foreach (var proj in availableProjects)
                            {
                                <option value="@proj.Id">@proj.Name</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col-md-6 align-self-end">
                        <button class="btn btn-info" @onclick="LoadSelectedProject" disabled="@(selectedProjectId == null || selectedProjectId == Guid.Empty)">
                            <i class="bi bi-folder-symlink me-1"></i> Load Project Details
                        </button>
                    </div>
                </div>
            }
            @if (!string.IsNullOrEmpty(projectLoadStatus))
            {
                <div class="mt-2 alert @(currentLoadedProject != null && isProjectLoaded ? "alert-success" : "alert-warning")">
                    @projectLoadStatus
                </div>
            }
        </div>
    </div>

    <!-- Row 1: Database Connection -->
    <div class="row p-2 my-2 border rounded">
        <div class="col-12">
            <h4>@(isProjectLoaded && currentLoadedProject != null ? $"Database Connection (from Project: {currentLoadedProject.Name})" : "Database Connection (Manual)")</h4>
            @if (!isProjectLoaded)
            {
                <div class="mb-3">
                    <label for="serverName" class="form-label">Server Name</label>
                    <input type="text" class="form-control" id="serverName" @bind="connectionDetails.ServerName" />
                </div>
                <div class="mb-3">
                    <label for="databaseName" class="form-label">Database Name</label>
                    <input type="text" class="form-control" id="databaseName" @bind="connectionDetails.DatabaseName" />
                </div>
                <div class="mb-3">
                    <label for="authType" class="form-label">Authentication Type</label>
                    <select class="form-select" id="authType" @bind="connectionDetails.AuthenticationType">
                        <option value="windows">Windows Authentication</option>
                        <option value="sql">SQL Server Authentication</option>
                    </select>
                </div>
                @if (connectionDetails.AuthenticationType == "sql")
                {
                    <div class="mb-3">
                        <label for="userName" class="form-label">User Name</label>
                        <input type="text" class="form-control" id="userName" @bind="connectionDetails.UserName" />
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <input type="password" class="form-control" id="password" @bind="connectionDetails.Password" />
                    </div>
                }
                <button class="btn btn-success" @onclick="() => ConnectToDatabase(null)">Connect (Manual)</button>
            }
            @if (!string.IsNullOrEmpty(connectionStatus))
            {
                <div class="mt-2 alert @(isConnectionSuccess ? "alert-success" : "alert-danger")">
                    @connectionStatus
                </div>
            }
        </div>
    </div>

    <!-- Row 2: Main Area -->
    <div class="row p-2 my-2 border rounded">
        <!-- Column 1: Database Schema Explorer -->
        <div class="col-md-5 border-end">
            <h4>Select Tables (Multiple)</h4>
            @if (tables.Any())
            {
                <div class="list-group" style="max-height: 200px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; border-radius: 4px;">
                    @foreach (var tableNameInList in tables)
                    {
                        <label class="list-group-item">
                            <input type="checkbox" class="form-check-input me-1"
                                   checked="@(tableSelectionState.ContainsKey(tableNameInList) ? tableSelectionState[tableNameInList] : false)"
                                   @onchange="(ChangeEventArgs e) => ToggleTableSelection(tableNameInList, e.Value)" />
                            @tableNameInList
                        </label>
                    }
                </div>
            }
            else if (isConnectionSuccess)
            {
                <p>No tables found for the current connection.</p>
            }
            else
            {
                <p>Connect to a database to see tables.</p>
            }

            <h4 class="mt-3">Configure Selected Tables:</h4>
            @if (!string.IsNullOrEmpty(columnLoadingError))
            {
                <div class="alert alert-danger">@columnLoadingError</div>
            }
            @if (!selectedTableNamesForGeneration.Any())
            {
                <p>No tables selected. Select tables above to configure them.</p>
            }

            @foreach (var tableName in selectedTableNamesForGeneration)
            {
                <div class="p-3 my-2 border rounded">
                    <h5>Table: @tableName</h5>
                    <div class="mb-3">
                        <label for="alias_@tableName" class="form-label">Alias/ClassName:</label>
                        <input type="text" id="alias_@tableName" class="form-control form-control-sm"
                               @bind="tableAliases[tableName]" @bind:event="oninput" />
                    </div>

                    <h6>Columns for @tableName:</h6>
                    @if (allColumnsForSelectedTables.TryGetValue(tableName, out var columns) && columns.Any())
                    {
                        <div class="list-group mb-2" style="max-height: 250px; overflow-y: auto;">
                            @foreach (var column in columns)
                            {
                                <label class="list-group-item small">
                                    <input type="checkbox" class="form-check-input me-1"
                                           checked="@(columnSelectionStates.ContainsKey(tableName) && columnSelectionStates[tableName].ContainsKey(column.ColumnName) ? columnSelectionStates[tableName][column.ColumnName] : false)"
                                           @onchange="(ChangeEventArgs e) => ToggleColumnSelectionForTable(tableName, column.ColumnName, e.Value)" />
                                    @column.ColumnName <small class="text-muted">(@column.DataType @(column.IsPrimaryKey ? "PK" : "") @(column.IsNullable ? "?" : ""))</small>
                                </label>
                            }
                        </div>
                        <button class="btn btn-sm btn-outline-secondary me-1" @onclick="() => SelectAllColumnsForTable(tableName, true)">Select All</button>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="() => SelectAllColumnsForTable(tableName, false)">Deselect All</button>
                    }
                    else if (allColumnsForSelectedTables.ContainsKey(tableName))
                    {
                        <p>No columns found for this table or still loading.</p>
                    }
                    else
                    {
                         <p>Loading columns for @tableName...</p>
                    }
                </div>
            }
        </div>

        <!-- Column 2: Snippet Selection & Configuration -->
        <div class="col-md-7">
            <h4>Generation Parameters</h4>
            <div class="mb-3">
                <label for="namespaceInput" class="form-label">Namespace:</label>
                <input type="text" class="form-control" id="namespaceInput" @bind="currentNamespace" placeholder="Enter namespace (e.g., MyProject.Models)" />
            </div>
            <div class="mb-3">
                <label for="programNameInput" class="form-label">Program Name:</label>
                <input type="text" class="form-control" id="programNameInput" @bind="currentProgramName" placeholder="Enter program/generator name (e.g., MyAwesomeGenerator)" />
            </div>

            <h4 class="mt-3">Snippet Selection</h4>
            <h5>Snippet Selection Mode:</h5>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="snippetSelectionModeOptions" id="selectIndividualMode" value="individual" @onchange="@(() => HandleSnippetSelectionModeChange("individual"))" checked="@(snippetSelectionMode == "individual")">
                <label class="form-check-label" for="selectIndividualMode">
                    Select Individual Snippets
                </label>
            </div>
            @if (isProjectLoaded && availableSnippetSetsForProject.Any())
            {
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="snippetSelectionModeOptions" id="selectFromSetsMode" value="sets" @onchange="@(() => HandleSnippetSelectionModeChange("sets"))" checked="@(snippetSelectionMode == "sets")">
                    <label class="form-check-label" for="selectFromSetsMode">
                        Select Snippet Set(s) from Project
                    </label>
                </div>
            }

            @if (snippetSelectionMode == "sets" && isProjectLoaded && availableSnippetSetsForProject.Any())
            {
                <h5 class="mt-3">Select Project Snippet Sets:</h5>
                @foreach (var snippetSet in availableSnippetSetsForProject)
                {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="set_@snippetSet.Id"
                               checked="@selectedSnippetSetIdsForGeneration.Contains(snippetSet.Id)"
                               @onchange="() => ToggleSnippetSetSelectionForGeneration(snippetSet.Id)">
                        <label class="form-check-label" for="set_@snippetSet.Id">@snippetSet.Name (@snippetSet.Description)</label>
                    </div>
                }
            }

            @if (snippetSelectionMode == "individual")
            {
                <h5 class="mt-3">Select Individual Snippets:</h5>
                <div class="list-group mt-2" style="max-height: 300px; overflow-y: auto;">
                    @if (availableSnippets.Any())
                    {
                        @foreach (var snippet in availableSnippets)
                        {
                            <label class="list-group-item d-flex justify-content-between align-items-center">
                                <span>
                                    <input type="checkbox" class="form-check-input me-2"
                                           id="snippet_@snippet.Name.Replace(" ", "")"
                                           checked="@(individualSnippetSelectionState.ContainsKey(snippet.Name) ? individualSnippetSelectionState[snippet.Name] : false)"
                                           @onchange="() => ToggleIndividualSnippetSelection(snippet.Name)" />
                                    @snippet.Name
                                </span>
                                <small class="text-muted">@snippet.Description</small>
                            </label>
                        }
                    }
                    else
                    {
                        <p class="list-group-item">No snippets available for selection.</p>
                    }
                </div>
                @if (availableSnippets.Any())
                {
                    <button class="btn btn-sm btn-outline-secondary mt-2 me-1" @onclick="() => SelectAllIndividualSnippets(true)">Select All</button>
                    <button class="btn btn-sm btn-outline-secondary mt-2" @onclick="() => SelectAllIndividualSnippets(false)">Deselect All</button>
                }
            }
            <button class="btn btn-primary mt-3" @onclick="HandleGenerateCode">Generate Code</button>
        </div>
    </div>

    <!-- Row 3: Generated Code Output Status -->
    <div class="row p-2 my-2 border rounded">
        <div class="col-12">
            <h4>Generation Status</h4>
            @if (!string.IsNullOrWhiteSpace(generatedCode))
            {
                <div class="alert alert-info">@generatedCode</div>
            }
            else
            {
                 <p><em>Code generation results will appear in a modal.</em></p>
            }
        </div>
    </div>
</div>

<GeneratedCodeModal Results="multipleGeneratedCodeResults"
                  IsVisible="isModalVisible"
                  OnClose="CloseGeneratedCodeModal" />

@code {
    private ConnectionDetails connectionDetails = new ConnectionDetails();
    private string? connectionStatus;
    private bool isConnectionSuccess = false;
    private List<string> tables = new List<string>();

    private List<Project>? availableProjects;
    private Guid? selectedProjectId;
    private Project? currentLoadedProject;
    private string? projectLoadStatus;
    private bool isProjectLoaded = false;

    private List<string> selectedTableNamesForGeneration = new List<string>();
    private Dictionary<string, bool> tableSelectionState = new Dictionary<string, bool>();

    private Dictionary<string, string> tableAliases = new Dictionary<string, string>();
    private Dictionary<string, List<ColumnDetail>> allColumnsForSelectedTables = new Dictionary<string, List<ColumnDetail>>();
    private Dictionary<string, Dictionary<string, bool>> columnSelectionStates = new Dictionary<string, Dictionary<string, bool>>();
    private string columnLoadingError = string.Empty;

    private List<CodeSnippet> availableSnippets = new List<CodeSnippet>();
    private string? currentNamespace = "";
    private string? currentProgramName = "";
    private List<SnippetSet> availableSnippetSetsForProject = new List<SnippetSet>();
    private HashSet<Guid> selectedSnippetSetIdsForGeneration = new HashSet<Guid>();
    private Dictionary<string, bool> individualSnippetSelectionState = new Dictionary<string, bool>();
    private string snippetSelectionMode = "individual";

    private List<Models.GeneratedCodeResult> multipleGeneratedCodeResults = new List<Models.GeneratedCodeResult>();
    private bool isModalVisible = false;
    private string generatedCode = "// Select options and click 'Generate Code'.";

    protected override async Task OnInitializedAsync()
    {
        await SnippetService.EnsureInitializedAsync();
        availableSnippets = SnippetService.Snippets.ToList();
        individualSnippetSelectionState.Clear();
        foreach (var snippet in availableSnippets)
        {
            individualSnippetSelectionState[snippet.Name] = false;
        }
        currentNamespace = "";
        currentProgramName = "";
        tableSelectionState = new Dictionary<string, bool>();
        tableAliases = new Dictionary<string, string>();
        allColumnsForSelectedTables = new Dictionary<string, List<ColumnDetail>>();
        columnSelectionStates = new Dictionary<string, Dictionary<string, bool>>();

        try
        {
            availableProjects = await ProjectSvc.GetProjectsAsync();
        }
        catch (Exception ex)
        {
            projectLoadStatus = $"Error loading projects: {ex.Message}";
            availableProjects = new List<Project>();
        }
        await base.OnInitializedAsync();
    }

    private async Task LoadSelectedProject()
    {
        projectLoadStatus = null;
        currentLoadedProject = null;
        isProjectLoaded = false;
        connectionStatus = null;
        tables.Clear();
        selectedTableNamesForGeneration.Clear();
        tableSelectionState.Clear();
        availableSnippetSetsForProject.Clear();
        selectedSnippetSetIdsForGeneration.Clear();

        tableAliases.Clear();
        allColumnsForSelectedTables.Clear();
        columnSelectionStates.Clear();
        columnLoadingError = string.Empty;

        if (selectedProjectId == null || selectedProjectId == Guid.Empty)
        {
            projectLoadStatus = "Switched to manual mode. All snippets available.";
            availableSnippets = SnippetService.Snippets.ToList();
            individualSnippetSelectionState.Clear();
            foreach (var snippet in availableSnippets)
            {
                individualSnippetSelectionState[snippet.Name] = false;
            }
            snippetSelectionMode = "individual";
            currentNamespace = "";
            currentProgramName = "";
            connectionStatus = "Manual mode. Please connect to a database.";
            isConnectionSuccess = false;
            await UpdateAndPruneSelectedTableContexts();
        }
        else
        {
            try
            {
                currentLoadedProject = await ProjectSvc.GetProjectByIdAsync(selectedProjectId.Value);
                if (currentLoadedProject == null)
                {
                    projectLoadStatus = "Failed to load selected project details.";
                    currentNamespace = "";
                    currentProgramName = "";
                    snippetSelectionMode = "individual";
                    availableSnippets = SnippetService.Snippets.ToList();
                    individualSnippetSelectionState.Clear();
                    foreach (var snippet in availableSnippets) { individualSnippetSelectionState[snippet.Name] = false; }
                    availableSnippetSetsForProject.Clear();
                    selectedSnippetSetIdsForGeneration.Clear();
                    selectedTableNamesForGeneration.Clear();
                    tableSelectionState.Clear();
                    tableAliases.Clear();
                    allColumnsForSelectedTables.Clear();
                    columnSelectionStates.Clear();
                    columnLoadingError = string.Empty;
                    await UpdateAndPruneSelectedTableContexts();
                }
                else
                {
                    isProjectLoaded = true;
                    projectLoadStatus = $"Project '{currentLoadedProject.Name}' loaded.";
                    currentNamespace = currentLoadedProject.Namespace ?? "";
                    currentProgramName = "";

                    if (currentLoadedProject.DatabaseConnectionId.HasValue && currentLoadedProject.DatabaseConnectionId.Value != Guid.Empty)
                    {
                        var dbConn = await DbConnectionSvc.GetConnectionByIdAsync(currentLoadedProject.DatabaseConnectionId.Value);
                        if (dbConn != null)
                        {
                            projectLoadStatus += $" Database connection '{dbConn.Name}' will be used.";
                            await ConnectToDatabase(dbConn.ConnectionString);
                        }
                        else
                        {
                            projectLoadStatus += $" Its associated database connection (ID: {currentLoadedProject.DatabaseConnectionId.Value}) could not be found.";
                            tables.Clear();
                            selectedTableNamesForGeneration.Clear();
                            tableSelectionState.Clear();
                            tableAliases.Clear();
                            allColumnsForSelectedTables.Clear();
                            columnSelectionStates.Clear();
                            columnLoadingError = string.Empty;
                            connectionStatus = "Project's DB connection not found.";
                            isConnectionSuccess = false;
                            await UpdateAndPruneSelectedTableContexts();
                        }
                    }
                    else
                    {
                        projectLoadStatus += " It does not have a database connection configured.";
                        tables.Clear();
                        selectedTableNamesForGeneration.Clear();
                        tableSelectionState.Clear();
                        tableAliases.Clear();
                        allColumnsForSelectedTables.Clear();
                        columnSelectionStates.Clear();
                        columnLoadingError = string.Empty;
                        connectionStatus = "Project has no DB connection.";
                        isConnectionSuccess = false;
                        await UpdateAndPruneSelectedTableContexts();
                    }

                    var allGlobalSnippets = SnippetService.Snippets.ToList();
                    if (currentLoadedProject.SelectedSnippetSetIds != null && currentLoadedProject.SelectedSnippetSetIds.Any())
                    {
                        List<SnippetSet> setsForProjectUI = new List<SnippetSet>();
                        HashSet<string> snippetNamesFromProjectSets = new HashSet<string>();
                        foreach (var setId in currentLoadedProject.SelectedSnippetSetIds)
                        {
                            var snipSet = await SnippetSetSvc.GetSnippetSetByIdAsync(setId);
                            if (snipSet != null)
                            {
                                setsForProjectUI.Add(snipSet);
                                foreach (var nameInSet in snipSet.SnippetNames) { snippetNamesFromProjectSets.Add(nameInSet); }
                            }
                        }
                        availableSnippetSetsForProject = setsForProjectUI.OrderBy(s => s.Name).ToList();
                        if (availableSnippetSetsForProject.Any())
                        {
                            snippetSelectionMode = "sets";
                            availableSnippets = allGlobalSnippets.Where(s => snippetNamesFromProjectSets.Contains(s.Name)).ToList();
                        }
                        else
                        {
                            snippetSelectionMode = "individual";
                            availableSnippets = allGlobalSnippets;
                        }
                    }
                    else
                    {
                        snippetSelectionMode = "individual";
                        availableSnippets = allGlobalSnippets;
                    }
                    individualSnippetSelectionState.Clear();
                    foreach (var snippet in availableSnippets) { individualSnippetSelectionState[snippet.Name] = false; }
                }
            }
            catch (Exception ex)
            {
                projectLoadStatus = $"Error loading project: {ex.Message}";
                isProjectLoaded = false;
                availableSnippets = SnippetService.Snippets.ToList();
                currentNamespace = ""; currentProgramName = ""; snippetSelectionMode = "individual";
                selectedTableNamesForGeneration.Clear(); tableSelectionState.Clear();
                tableAliases.Clear(); allColumnsForSelectedTables.Clear(); columnSelectionStates.Clear(); columnLoadingError = string.Empty;
                await UpdateAndPruneSelectedTableContexts();
            }
        }
        StateHasChanged();
    }

    private class ConnectionDetails
    {
        public string ServerName { get; set; } = "localhost";
        public string DatabaseName { get; set; } = "";
        public string AuthenticationType { get; set; } = "windows";
        public string UserName { get; set; } = "";
        public string Password { get; set; } = "";
        public string BuildConnectionString()
        {
            if (AuthenticationType == "windows")
                return $"Server={ServerName};Database={DatabaseName};Trusted_Connection=True;TrustServerCertificate=True;";
            else
                return $"Server={ServerName};Database={DatabaseName};User ID={UserName};Password={Password};TrustServerCertificate=True;";
        }
    }

    private async Task ConnectToDatabase(string? connectionStringFromProject = null)
    {
        connectionStatus = "Connecting...";
        isConnectionSuccess = false;
        tables.Clear();
        selectedTableNamesForGeneration.Clear();
        tableSelectionState.Clear();
        tableAliases.Clear();
        allColumnsForSelectedTables.Clear();
        columnSelectionStates.Clear();
        columnLoadingError = string.Empty;
        string connectionString;

        if (isProjectLoaded && !string.IsNullOrEmpty(connectionStringFromProject))
            connectionString = connectionStringFromProject;
        else if (!isProjectLoaded)
            connectionString = connectionDetails.BuildConnectionString();
        else
        {
            connectionStatus = "Project is loaded, but no database connection string was provided.";
            isConnectionSuccess = false;
            await UpdateAndPruneSelectedTableContexts();
            StateHasChanged();
            return;
        }

        try
        {
            var fetchedTables = DbSchemaReader.GetTables(connectionString);
            if (fetchedTables != null && fetchedTables.Any())
            {
                tables = fetchedTables.OrderBy(t => t).ToList();
                connectionStatus = $"Successfully connected and retrieved {tables.Count} table(s).";
                isConnectionSuccess = true;
                tableSelectionState.Clear();
                foreach (var tableNameInListLoop in tables)
                {
                    tableSelectionState[tableNameInListLoop] = false;
                }
                selectedTableNamesForGeneration.Clear();
            }
            else
            {
                connectionStatus = "Connected, but no user tables were found.";
                isConnectionSuccess = true;
                tableSelectionState.Clear();
                selectedTableNamesForGeneration.Clear();
            }
        }
        catch (Exception ex)
        {
            connectionStatus = $"Error connecting: {ex.Message}";
            isConnectionSuccess = false;
        }
        await UpdateAndPruneSelectedTableContexts();
        StateHasChanged();
    }

    private async Task UpdateAndPruneSelectedTableContexts()
    {
        columnLoadingError = string.Empty;
        var currentSelection = selectedTableNamesForGeneration.ToHashSet();

        var tablesToRemove = allColumnsForSelectedTables.Keys.Where(t => !currentSelection.Contains(t)).ToList();
        foreach (var tableName in tablesToRemove)
        {
            allColumnsForSelectedTables.Remove(tableName);
            tableAliases.Remove(tableName);
            columnSelectionStates.Remove(tableName);
        }

        foreach (var tableName in selectedTableNamesForGeneration)
        {
            if (!allColumnsForSelectedTables.ContainsKey(tableName))
            {
                tableAliases[tableName] = CodeGenService.NormalizeClassName(tableName);

                string connectionStringForColumns;
                if (isProjectLoaded && currentLoadedProject?.DatabaseConnectionId != null)
                {
                    var dbConn = await DbConnectionSvc.GetConnectionByIdAsync(currentLoadedProject.DatabaseConnectionId.Value);
                    if (dbConn == null) {
                        columnLoadingError += $"Project's DB connection not found for loading columns for {tableName}. ";
                        allColumnsForSelectedTables[tableName] = new List<ColumnDetail>();
                        columnSelectionStates[tableName] = new Dictionary<string, bool>();
                        continue;
                    }
                    connectionStringForColumns = dbConn.ConnectionString;
                }
                else if (!isProjectLoaded && isConnectionSuccess)
                {
                    connectionStringForColumns = connectionDetails.BuildConnectionString();
                }
                else
                {
                    columnLoadingError += $"Cannot load columns for {tableName}: No valid DB connection. ";
                    allColumnsForSelectedTables[tableName] = new List<ColumnDetail>();
                    columnSelectionStates[tableName] = new Dictionary<string, bool>();
                    continue;
                }

                try
                {
                    var columns = DbSchemaReader.GetColumns(connectionStringForColumns, tableName);
                    allColumnsForSelectedTables[tableName] = columns ?? new List<ColumnDetail>();

                    var selections = new Dictionary<string, bool>();
                    foreach (var col in allColumnsForSelectedTables[tableName])
                    {
                        selections[col.ColumnName] = true;
                    }
                    columnSelectionStates[tableName] = selections;
                }
                catch (Exception ex)
                {
                    columnLoadingError += $"Error loading columns for {tableName}: {ex.Message}. ";
                    allColumnsForSelectedTables[tableName] = new List<ColumnDetail>();
                    columnSelectionStates[tableName] = new Dictionary<string, bool>();
                }
            }
        }
        StateHasChanged();
    }

    private async Task ToggleTableSelection(string tableName, object? checkedValue)
    {
        bool isSelected = (bool)(checkedValue ?? false);
        if (tableSelectionState.ContainsKey(tableName))
        {
            tableSelectionState[tableName] = isSelected;
        }
        selectedTableNamesForGeneration = tableSelectionState
                                            .Where(kvp => kvp.Value)
                                            .Select(kvp => kvp.Key)
                                            .OrderBy(name => name)
                                            .ToList();
        await UpdateAndPruneSelectedTableContexts();
    }

    private void ToggleColumnSelectionForTable(string tableName, string columnName, object? checkedValue)
    {
        bool isSelected = (bool)(checkedValue ?? false);
        if (columnSelectionStates.TryGetValue(tableName, out var selections))
        {
            selections[columnName] = isSelected;
            StateHasChanged();
        }
    }

    private void SelectAllColumnsForTable(string tableName, bool select)
    {
        if (columnSelectionStates.TryGetValue(tableName, out var selections) &&
            allColumnsForSelectedTables.TryGetValue(tableName, out var columns))
        {
            foreach (var col in columns)
            {
                selections[col.ColumnName] = select;
            }
            StateHasChanged();
        }
    }

    private void HandleSnippetSelectionModeChange(string mode)
    {
        snippetSelectionMode = mode;
        if (mode == "individual") selectedSnippetSetIdsForGeneration.Clear();
        StateHasChanged();
    }

    private void ToggleSnippetSetSelectionForGeneration(Guid setId)
    {
        if (selectedSnippetSetIdsForGeneration.Contains(setId))
            selectedSnippetSetIdsForGeneration.Remove(setId);
        else
            selectedSnippetSetIdsForGeneration.Add(setId);
        StateHasChanged();
    }

    private void ToggleIndividualSnippetSelection(string snippetName)
    {
        if (individualSnippetSelectionState.ContainsKey(snippetName))
            individualSnippetSelectionState[snippetName] = !individualSnippetSelectionState[snippetName];
        else
            individualSnippetSelectionState[snippetName] = true;
        StateHasChanged();
    }

    private void SelectAllIndividualSnippets(bool select)
    {
        var snippetNames = availableSnippets.Select(s => s.Name).ToList();
        foreach (var name in snippetNames)
            individualSnippetSelectionState[name] = select;
        StateHasChanged();
    }

    private async Task HandleGenerateCode()
    {
        multipleGeneratedCodeResults.Clear();
        isModalVisible = false;
        generatedCode = ""; // Clear previous status messages

        if (!selectedTableNamesForGeneration.Any())
        {
            generatedCode = "Please select at least one table.";
            StateHasChanged();
            return;
        }

        List<CodeSnippet> snippetsToGenerate = new List<CodeSnippet>();
        if (snippetSelectionMode == "individual")
        {
            var selectedNames = individualSnippetSelectionState.Where(kv => kv.Value).Select(kv => kv.Key).ToHashSet();
            if (selectedNames.Any())
            {
                snippetsToGenerate = availableSnippets.Where(s => selectedNames.Contains(s.Name)).ToList();
            }
        }
        else if (snippetSelectionMode == "sets")
        {
            if (selectedSnippetSetIdsForGeneration.Any() && availableSnippetSetsForProject.Any())
            {
                var snippetNamesFromSelectedSets = new HashSet<string>();
                foreach (var setId in selectedSnippetSetIdsForGeneration)
                {
                    var snippetSet = availableSnippetSetsForProject.FirstOrDefault(s => s.Id == setId);
                    if (snippetSet != null)
                    {
                        foreach (var name in snippetSet.SnippetNames)
                        {
                            snippetNamesFromSelectedSets.Add(name);
                        }
                    }
                }
                await SnippetService.EnsureInitializedAsync();
                snippetsToGenerate = SnippetService.Snippets.Where(s => snippetNamesFromSelectedSets.Contains(s.Name)).ToList();
            }
        }

        if (!snippetsToGenerate.Any())
        {
            generatedCode = "Please select at least one code snippet or a snippet set.";
            StateHasChanged();
            return;
        }

        var tableContextsForGeneration = new List<TableGenerationContext>();
        foreach (var tableName in selectedTableNamesForGeneration)
        {
            // Use the injected CodeGenerationService instance name (CodeGenService)
            string userAlias = tableAliases.TryGetValue(tableName, out var alias) && !string.IsNullOrWhiteSpace(alias) ? alias : CodeGenService.NormalizeClassName(tableName);

            List<ColumnDetail> allColsForThisTable = allColumnsForSelectedTables.TryGetValue(tableName, out var cols) ? cols : new List<ColumnDetail>();
            List<ColumnDetail> selectedColsForThisTable = new List<ColumnDetail>();

            if (columnSelectionStates.TryGetValue(tableName, out var selections))
            {
                foreach (var colDetail in allColsForThisTable)
                {
                    if (selections.TryGetValue(colDetail.ColumnName, out var isSelected) && isSelected)
                    {
                        selectedColsForThisTable.Add(colDetail);
                    }
                }
            }

            if (!selectedColsForThisTable.Any())
            {
                generatedCode = $"Error: Table '{tableName}' ({userAlias}) is selected but has no columns selected for generation. Please select columns or deselect the table.";
                multipleGeneratedCodeResults.Clear();
                StateHasChanged();
                return;
            }

            tableContextsForGeneration.Add(new TableGenerationContext
            {
                TableName = tableName,
                UserAlias = userAlias,
                ClassName = CodeGenService.NormalizeClassName(userAlias), // ClassName is normalized UserAlias
                SelectedColumns = selectedColsForThisTable,
                IsPrimaryInContext = (tableContextsForGeneration.Count == 0)
            });
        }

        if (!tableContextsForGeneration.Any())
        {
            generatedCode = "No valid table contexts with selected columns were prepared for generation.";
            StateHasChanged();
            return;
        }

        foreach (var snippet in snippetsToGenerate)
        {
            string generatedOutput = CodeGenService.GenerateCode(
                tableContextsForGeneration,
                snippet,
                currentNamespace ?? "",
                currentProgramName ?? ""
            );

            multipleGeneratedCodeResults.Add(new Models.GeneratedCodeResult
            {
                SnippetName = snippet.Name,
                GeneratedContent = generatedOutput,
                SuggestedFileName = GenerateFileName(snippet, tableContextsForGeneration.FirstOrDefault()?.UserAlias, currentProgramName, currentNamespace)
            });
        }

        if (multipleGeneratedCodeResults.Any())
        {
            generatedCode = $"// {multipleGeneratedCodeResults.Count} snippet(s) generated. Displaying in modal.";
            isModalVisible = true;
        }
        else
        {
           generatedCode = "// No code was generated. Check selections.";
        }
        StateHasChanged();
    }

    private string GenerateFileName(CodeSnippet snippet, string? baseNameFromTable, string? programName, string? namespaceVal)
    {
        string baseName = string.IsNullOrWhiteSpace(baseNameFromTable) ? "Output" : baseNameFromTable;
        string snippetNamePart = snippet.Name.Replace(" ", "").Replace("(", "").Replace(")", "").Replace("/", "-");
        string extension = ".txt";
        if (snippet.Name.Contains("C# Model", StringComparison.OrdinalIgnoreCase) || (snippet.Template.Contains("class ") && snippet.Template.Contains("namespace "))) extension = ".cs";
        else if (snippet.Name.Contains("Razor", StringComparison.OrdinalIgnoreCase) || snippet.Name.Contains("Blazor", StringComparison.OrdinalIgnoreCase)) extension = ".razor";
        else if (snippet.Name.Contains("XML", StringComparison.OrdinalIgnoreCase)) extension = ".xml";
        else if (snippet.Name.Contains("JSON", StringComparison.OrdinalIgnoreCase)) extension = ".json";
        return $"{baseName}_{snippetNamePart}{extension}";
    }

    private void CloseGeneratedCodeModal()
    {
        isModalVisible = false;
        StateHasChanged();
    }
}
