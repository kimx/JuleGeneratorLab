@page "/generator"
@using JuleGeneratorLab.Services
@using JuleGeneratorLab.Models // Ensure this is present for Models.GeneratedCodeResult
@inject DatabaseSchemaReader DbSchemaReader
@inject CodeSnippetService SnippetService
@inject CodeGenerationService CodeGenService
@inject IJSRuntime JSRuntime
@inject ProjectService ProjectSvc
@inject DatabaseConnectionService DbConnectionSvc
@inject SnippetSetService SnippetSetSvc

<h3>Code Generator</h3>

<div class="container-fluid">
    <!-- Row 0: Project Selection -->
    <div class="row p-2 my-2 border rounded">
        <div class="col-12">
            <h4>Project Selection</h4>
            @if (availableProjects == null)
            {
                <p><em>Loading projects...</em></p>
            }
            else if (!availableProjects.Any())
            {
                <p>No projects available. Please create a project in the Project Manager.</p>
            }
            else
            {
                <div class="row">
                    <div class="col-md-6">
                        <label for="projectSelector" class="form-label">Select Project:</label>
                        <InputSelect id="projectSelector" class="form-select" @bind-Value="selectedProjectId">
                            <option value="">-- Select a Project --</option>
                            @foreach (var proj in availableProjects)
                            {
                                <option value="@proj.Id">@proj.Name</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col-md-6 align-self-end">
                        <button class="btn btn-info" @onclick="LoadSelectedProject" disabled="@(selectedProjectId == null || selectedProjectId == Guid.Empty)">
                            <i class="bi bi-folder-symlink me-1"></i> Load Project Details
                        </button>
                    </div>
                </div>
            }
            @if (!string.IsNullOrEmpty(projectLoadStatus))
            {
                <div class="mt-2 alert @(currentLoadedProject != null && isProjectLoaded ? "alert-success" : "alert-warning")">
                    @projectLoadStatus
                </div>
            }
        </div>
    </div>

    <!-- Row 1: Database Connection -->
    <div class="row p-2 my-2 border rounded">
        <div class="col-12">
            <h4>@(isProjectLoaded && currentLoadedProject != null ? $"Database Connection (from Project: {currentLoadedProject.Name})" : "Database Connection (Manual)")</h4>

            @if (!isProjectLoaded)
            {
                    <div class="mb-3">
                        <label for="serverName" class="form-label">Server Name</label>
                        <input type="text" class="form-control" id="serverName" @bind="connectionDetails.ServerName" />
                    </div>
                    <div class="mb-3">
                        <label for="databaseName" class="form-label">Database Name</label>
                        <input type="text" class="form-control" id="databaseName" @bind="connectionDetails.DatabaseName" />
                    </div>
                    <div class="mb-3">
                        <label for="authType" class="form-label">Authentication Type</label>
                        <select class="form-select" id="authType" @bind="connectionDetails.AuthenticationType">
                            <option value="windows">Windows Authentication</option>
                            <option value="sql">SQL Server Authentication</option>
                        </select>
                    </div>
                    @if (connectionDetails.AuthenticationType == "sql")
                    {
                        <div class="mb-3">
                            <label for="userName" class="form-label">User Name</label>
                            <input type="text" class="form-control" id="userName" @bind="connectionDetails.UserName" />
                        </div>
                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <input type="password" class="form-control" id="password" @bind="connectionDetails.Password" />
                        </div>
                    }
                    <button class="btn btn-success" @onclick="() => ConnectToDatabase(null)">Connect (Manual)</button>
            }
            @if (!string.IsNullOrEmpty(connectionStatus))
            {
                <div class="mt-2 alert @(isConnectionSuccess ? "alert-success" : "alert-danger")">
                            @connectionStatus
                        </div>
                    }
        </div>
    </div>

    <!-- Row 2: Main Area -->
    <div class="row p-2 my-2 border rounded">
        <!-- Column 1: Database Schema Explorer -->
        <div class="col-md-5 border-end">
            <h4>Database Schema</h4>
            @if (tables.Any())
                    {
                        <div class="list-group" style="max-height: 300px; overflow-y: auto;">
                            @foreach (var table in tables)
                            {
                                <button type="button"
                                        class="list-group-item list-group-item-action @(currentSelectedTable == table ? "active" : "")"
                                        @onclick="() => SelectTableAndLoadColumns(table)">
                                    @table
                                </button>
                            }
                        </div>
                    }
                    else if (isConnectionSuccess)
                    {
                        <p>No tables found.</p>
                    }
                    else
                    {
                        <p>Connect to a database to see tables.</p>
                    }

                    @if (currentSelectedTable != null)
                    {
                        <h5 class="mt-3">Columns for @currentSelectedTable</h5>
                        @if (!string.IsNullOrEmpty(columnSelectionError))
                        {
                            <div class="alert alert-danger mt-2">@columnSelectionError</div>
                        }
                        @if (columnsForSelectedTable.Any())
                        {
                            <div class="list-group mt-2" style="max-height: 400px; overflow-y: auto;">
                                @foreach (var column in columnsForSelectedTable)
                                {
                                    <label class="list-group-item">
                                        <input type="checkbox" class="form-check-input me-1"
                                               checked="@(selectedColumns.ContainsKey(column.ColumnName) ? selectedColumns[column.ColumnName] : false)"
                                               @onchange="() => ToggleColumnSelection(column.ColumnName)" />
                                        @column.ColumnName <small class="text-muted">(@column.DataType @(column.IsPrimaryKey ? "PK" : "") @(column.IsNullable ? "?" : ""))</small>
                                    </label>
                                }
                            </div>
                            <button class="btn btn-sm btn-outline-secondary mt-2" @onclick="() => SelectAllColumns(true)">Select All</button>
                            <button class="btn btn-sm btn-outline-secondary mt-2" @onclick="() => SelectAllColumns(false)">Deselect All</button>
                        }
                        else if (string.IsNullOrEmpty(columnSelectionError))
                        {
                            <p>No columns found for this table or still loading.</p>
                        }
                    }
        </div>

        <!-- Column 2: Snippet Selection & Configuration -->
        <div class="col-md-7">
            <h4>Generation Parameters</h4>
            <div class="mb-3">
                <label for="namespaceInput" class="form-label">Namespace:</label>
                <input type="text" class="form-control" id="namespaceInput" @bind="currentNamespace" placeholder="Enter namespace (e.g., MyProject.Models)" />
            </div>
            <div class="mb-3">
                <label for="programNameInput" class="form-label">Program Name:</label>
                <input type="text" class="form-control" id="programNameInput" @bind="currentProgramName" placeholder="Enter program/generator name (e.g., MyAwesomeGenerator)" />
            </div>

            <h4 class="mt-3">Snippet Selection</h4>
            <!-- Snippet Selection Mode -->
            <h5>Snippet Selection Mode:</h5>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="snippetSelectionModeOptions" id="selectIndividualMode" value="individual" @onchange="@(() => HandleSnippetSelectionModeChange("individual"))" checked="@(snippetSelectionMode == "individual")">
                <label class="form-check-label" for="selectIndividualMode">
                    Select Individual Snippets
                </label>
            </div>
            @if (isProjectLoaded && availableSnippetSetsForProject.Any())
            {
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="snippetSelectionModeOptions" id="selectFromSetsMode" value="sets" @onchange="@(() => HandleSnippetSelectionModeChange("sets"))" checked="@(snippetSelectionMode == "sets")">
                    <label class="form-check-label" for="selectFromSetsMode">
                        Select Snippet Set(s) from Project
                    </label>
                </div>
            }

            <!-- UI for Snippet Set Selection -->
            @if (snippetSelectionMode == "sets" && isProjectLoaded && availableSnippetSetsForProject.Any())
            {
                <h5 class="mt-3">Select Project Snippet Sets:</h5>
                @foreach (var snippetSet in availableSnippetSetsForProject)
                {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="set_@snippetSet.Id"
                               checked="@selectedSnippetSetIdsForGeneration.Contains(snippetSet.Id)"
                               @onchange="() => ToggleSnippetSetSelectionForGeneration(snippetSet.Id)">
                        <label class="form-check-label" for="set_@snippetSet.Id">@snippetSet.Name (@snippetSet.Description)</label>
                    </div>
                }
            }

            <!-- UI for Individual Snippet Selection -->
            @if (snippetSelectionMode == "individual")
            {
                <h5 class="mt-3">Select Individual Snippets:</h5>
                <div class="list-group mt-2" style="max-height: 300px; overflow-y: auto;">
                    @if (availableSnippets.Any())
                    {
                        @foreach (var snippet in availableSnippets)
                        {
                            <label class="list-group-item d-flex justify-content-between align-items-center">
                                <span>
                                    <input type="checkbox" class="form-check-input me-2"
                                           id="snippet_@snippet.Name.Replace(" ", "")"
                                           checked="@(individualSnippetSelectionState.ContainsKey(snippet.Name) ? individualSnippetSelectionState[snippet.Name] : false)"
                                           @onchange="() => ToggleIndividualSnippetSelection(snippet.Name)" />
                                    @snippet.Name
                                </span>
                                <small class="text-muted">@snippet.Description</small>
                            </label>
                        }
                    }
                    else
                    {
                        <p class="list-group-item">No snippets available for selection.</p>
                    }
                </div>
                @if (availableSnippets.Any())
                {
                    <button class="btn btn-sm btn-outline-secondary mt-2 me-1" @onclick="() => SelectAllIndividualSnippets(true)">Select All</button>
                    <button class="btn btn-sm btn-outline-secondary mt-2" @onclick="() => SelectAllIndividualSnippets(false)">Deselect All</button>
                }
            }
            <button class="btn btn-primary mt-3" @onclick="HandleGenerateCode">Generate Code</button>
        </div>
    </div>

    <!-- Row 3: Generated Code Output Status -->
    <div class="row p-2 my-2 border rounded">
        <div class="col-12">
            <h4>Generation Status</h4>
            @if (!string.IsNullOrWhiteSpace(generatedCode)) // Display status if not empty
            {
                <div class="alert alert-info">@generatedCode</div>
            }
            else
            {
                 <p><em>Code generation results will appear in a modal.</em></p>
            }
        </div>
    </div>
</div>

<GeneratedCodeModal Results="multipleGeneratedCodeResults"
                  IsVisible="isModalVisible"
                  OnClose="CloseGeneratedCodeModal" />

@code {
    private ConnectionDetails connectionDetails = new ConnectionDetails();
    private string? connectionStatus;
    private bool isConnectionSuccess = false;
    private List<string> tables = new List<string>();

    // Project related properties
    private List<Project>? availableProjects;
    private Guid? selectedProjectId;
    private Project? currentLoadedProject;
    private string? projectLoadStatus;
    private bool isProjectLoaded = false;

    private string? currentSelectedTable;
    private List<ColumnDetail> columnsForSelectedTable = new List<ColumnDetail>();
    private Dictionary<string, bool> selectedColumns = new Dictionary<string, bool>(); // ColumnName -> IsSelected
    private string? columnSelectionError;

    private List<CodeSnippet> availableSnippets = new List<CodeSnippet>();
    //private string? selectedSnippetName; // Replaced by individualSnippetSelectionState and selectedSnippetSetIdsForGeneration

    // New properties for namespace and program name
    private string? currentNamespace = "";
    private string? currentProgramName = "";

    // New properties for snippet set selection
    private List<SnippetSet> availableSnippetSetsForProject = new List<SnippetSet>();
    private HashSet<Guid> selectedSnippetSetIdsForGeneration = new HashSet<Guid>();
    private Dictionary<string, bool> individualSnippetSelectionState = new Dictionary<string, bool>();
    private string snippetSelectionMode = "individual"; // "individual" or "sets"

    // Removed inner class GeneratedCodeResult as it's moved to Models/GeneratedCodeResult.cs
    private List<Models.GeneratedCodeResult> multipleGeneratedCodeResults = new List<Models.GeneratedCodeResult>();
    private bool isModalVisible = false; // For controlling the modal visibility


    protected override async Task OnInitializedAsync() // Changed from OnInitialized
    {
        await SnippetService.EnsureInitializedAsync(); // New line
        availableSnippets = SnippetService.Snippets.ToList();
        // Initialize individual snippet selection state
        individualSnippetSelectionState.Clear();
        foreach (var snippet in availableSnippets)
        {
            individualSnippetSelectionState[snippet.Name] = false; // Default to not selected
        }
        currentNamespace = ""; // Initialize
        currentProgramName = ""; // Initialize

        try
        {
            availableProjects = await ProjectSvc.GetProjectsAsync();
        }
        catch (Exception ex)
        {
            projectLoadStatus = $"Error loading projects: {ex.Message}";
            availableProjects = new List<Project>();
        }

        // Any other async initialization logic can go here
        await base.OnInitializedAsync(); // Call base method
    }

    private async Task LoadSelectedProject()
    {
        projectLoadStatus = null;
        currentLoadedProject = null;
        isProjectLoaded = false;
        connectionStatus = null; // Clear previous manual connection status
        tables.Clear(); // Clear tables from previous connection
        currentSelectedTable = null;
        columnsForSelectedTable.Clear();
        selectedColumns.Clear();

        // Reset new fields
        availableSnippetSetsForProject.Clear();
        selectedSnippetSetIdsForGeneration.Clear();
        // individualSnippetSelectionState is managed below
        // currentNamespace is managed below
        // currentProgramName is managed below


        if (selectedProjectId == null || selectedProjectId == Guid.Empty)
        {
            projectLoadStatus = "Switched to manual mode. All snippets available.";
            currentLoadedProject = null;
            isProjectLoaded = false;
            availableSnippets = SnippetService.Snippets; // Show all snippets

            individualSnippetSelectionState.Clear(); // Clear and repopulate for all snippets
            foreach (var snippet in availableSnippets)
            {
                individualSnippetSelectionState[snippet.Name] = false;
            }
            snippetSelectionMode = "individual"; // Default to individual mode
            currentNamespace = "";
            currentProgramName = "";

            // Clear the DB schema view but leave manual connectionDetails fields as they are
            tables.Clear();
            currentSelectedTable = null;
            columnsForSelectedTable.Clear();
            selectedColumns.Clear();
            connectionStatus = "Manual mode. Please connect to a database.";
            isConnectionSuccess = false;
            StateHasChanged();
            return;
        }

        try
        {
            currentLoadedProject = await ProjectSvc.GetProjectByIdAsync(selectedProjectId.Value);
            if (currentLoadedProject == null)
            {
                projectLoadStatus = "Failed to load selected project details.";
                currentNamespace = ""; // Reset on failure
                currentProgramName = ""; // Reset on failure
                snippetSelectionMode = "individual";
                availableSnippets = SnippetService.Snippets; // Show all snippets
                individualSnippetSelectionState.Clear();
                foreach (var snippet in availableSnippets) { individualSnippetSelectionState[snippet.Name] = false; }
                availableSnippetSetsForProject.Clear(); // Clear sets
                selectedSnippetSetIdsForGeneration.Clear(); // Clear selected sets
                return;
            }

            isProjectLoaded = true; // Set this early after project is confirmed loaded
            projectLoadStatus = $"Project '{currentLoadedProject.Name}' loaded."; // Initial status
            currentNamespace = currentLoadedProject.Namespace ?? ""; // Pre-fill namespace
            currentProgramName = ""; // Reset program name for new project load

            if (currentLoadedProject.DatabaseConnectionId.HasValue && currentLoadedProject.DatabaseConnectionId.Value != Guid.Empty)
            {
                var dbConn = await DbConnectionSvc.GetConnectionByIdAsync(currentLoadedProject.DatabaseConnectionId.Value);
                if (dbConn != null)
                {
                    projectLoadStatus += $" Database connection '{dbConn.Name}' will be used.";
                    // Automatically connect using the project's connection string
                    await ConnectToDatabase(dbConn.ConnectionString);
                }
                else
                {
                    projectLoadStatus += $" Its associated database connection (ID: {currentLoadedProject.DatabaseConnectionId.Value}) could not be found. Please check DB Connections.";
                    // Clear DB specific views as connection is missing
                    tables.Clear();
                    currentSelectedTable = null;
                    columnsForSelectedTable.Clear();
                    selectedColumns.Clear();
                    connectionStatus = "Project's DB connection not found. Connect manually or update project.";
                    isConnectionSuccess = false;
                }
            }
            else
            {
                projectLoadStatus += " It does not have a database connection configured.";
                // Clear DB specific views as no DB is configured for project
                tables.Clear();
                currentSelectedTable = null;
                columnsForSelectedTable.Clear();
                selectedColumns.Clear();
                connectionStatus = "Project loaded has no DB connection. Connect manually or select another project.";
                isConnectionSuccess = false;
            }

            // Snippet Filtering Logic AND Set UI Population
            availableSnippetSetsForProject.Clear();
            selectedSnippetSetIdsForGeneration.Clear(); // Clear previous project's set selections

            var allGlobalSnippets = SnippetService.Snippets.ToList(); // Master list of all snippets

            if (currentLoadedProject.SelectedSnippetSetIds != null && currentLoadedProject.SelectedSnippetSetIds.Any())
            {
                List<SnippetSet> setsForProjectUI = new List<SnippetSet>();
                HashSet<string> snippetNamesFromProjectSets = new HashSet<string>();
                List<string> foundSetNamesForStatus = new List<string>();

                foreach (var setId in currentLoadedProject.SelectedSnippetSetIds)
                {
                    var snipSet = await SnippetSetSvc.GetSnippetSetByIdAsync(setId);
                    if (snipSet != null)
                    {
                        setsForProjectUI.Add(snipSet);
                        foundSetNamesForStatus.Add(snipSet.Name);
                        foreach (var nameInSet in snipSet.SnippetNames)
                        {
                            snippetNamesFromProjectSets.Add(nameInSet);
                        }
                    }
                }
                availableSnippetSetsForProject = setsForProjectUI.OrderBy(s => s.Name).ToList();

                if (availableSnippetSetsForProject.Any()) // If project has valid sets
                {
                    snippetSelectionMode = "sets"; // Default to set selection
                    // Filter `availableSnippets` for the "Individual" tab to only those in the project's sets
                    availableSnippets = allGlobalSnippets.Where(s => snippetNamesFromProjectSets.Contains(s.Name)).ToList();
                    if (!availableSnippets.Any() && snippetNamesFromProjectSets.Any()) {
                         projectLoadStatus += $" Project sets '{string.Join(", ", foundSetNamesForStatus)}' refer to snippets not currently loaded. ";
                    }
                    projectLoadStatus += $" Project has snippet sets: '{string.Join(", ", foundSetNamesForStatus)}'. Defaulting to set selection. Individual tab will show {availableSnippets.Count} project-specific snippets.";
                }
                else // Sets were defined in project but none were found/loaded, or they were empty
                {
                    snippetSelectionMode = "individual";
                    availableSnippets = allGlobalSnippets; // Show all global snippets
                    projectLoadStatus += " Project's configured snippet sets were not found or are empty. Defaulting to individual selection of all global snippets.";
                }
            }
            else // No sets defined for this project
            {
                snippetSelectionMode = "individual";
                availableSnippets = allGlobalSnippets; // Show all global snippets
                projectLoadStatus += " No snippet sets configured for this project. Defaulting to individual selection of all global snippets.";
            }

            // Initialize/reset individualSnippetSelectionState based on the (potentially project-filtered) availableSnippets
            individualSnippetSelectionState.Clear();
            foreach (var snippet in availableSnippets)
            {
                individualSnippetSelectionState[snippet.Name] = false;
            }
        }
        catch (Exception ex)
        {
            projectLoadStatus = $"Error loading project: {ex.Message}";
            isProjectLoaded = false; // Ensure this is false on error
            availableSnippets = SnippetService.Snippets; // Revert to all snippets on error

            individualSnippetSelectionState.Clear();
            foreach (var snippet in availableSnippets)
            {
                individualSnippetSelectionState[snippet.Name] = false;
            }
            currentNamespace = "";
            currentProgramName = "";
            snippetSelectionMode = "individual";
            availableSnippetSetsForProject.Clear();
            selectedSnippetSetIdsForGeneration.Clear();
        }
        StateHasChanged();
    }

    private class ConnectionDetails
    {
        public string ServerName { get; set; } = "localhost"; // Default value
        public string DatabaseName { get; set; } = "";
        public string AuthenticationType { get; set; } = "windows"; // Default to Windows Auth
        public string UserName { get; set; } = "";
        public string Password { get; set; } = "";

        public string BuildConnectionString()
        {
            if (AuthenticationType == "windows")
            {
                return $"Server={ServerName};Database={DatabaseName};Trusted_Connection=True;TrustServerCertificate=True;";
            }
            else // SQL Server Authentication
            {
                return $"Server={ServerName};Database={DatabaseName};User ID={UserName};Password={Password};TrustServerCertificate=True;";
            }
        }
    }

    private async Task ConnectToDatabase(string? connectionStringFromProject = null)
    {
        connectionStatus = "Connecting...";
        isConnectionSuccess = false;
        tables.Clear();
        currentSelectedTable = null;
        columnsForSelectedTable.Clear();
        selectedColumns.Clear();
        columnSelectionError = null;
        string connectionString;

        if (isProjectLoaded && !string.IsNullOrEmpty(connectionStringFromProject))
        {
            connectionString = connectionStringFromProject;
            // Update display fields for connectionDetails to reflect project's settings (optional, if shown)
            // This might be complex if parsing is needed. For now, status messages will indicate project use.
            // connectionDetails.ServerName = "Using Project Connection";
            // connectionDetails.DatabaseName = ""; // Clear manual fields or mark as from project
        }
        else if (!isProjectLoaded) // Only build from manual details if not in project mode or project connection string is missing
        {
            connectionString = connectionDetails.BuildConnectionString();
        }
        else // isProjectLoaded but connectionStringFromProject is null/empty (e.g. project has no DB configured)
        {
            connectionStatus = "Project is loaded, but no database connection string was provided by the project. Cannot connect.";
            isConnectionSuccess = false;
            StateHasChanged();
            return;
        }


        try
        {
            var fetchedTables = DbSchemaReader.GetTables(connectionString);

            if (fetchedTables != null && fetchedTables.Any())
            {
                tables = fetchedTables;
                string dbName = isProjectLoaded ? (currentLoadedProject?.Name ?? "project") : connectionDetails.DatabaseName;
                connectionStatus = $"Successfully connected (using {(isProjectLoaded ? $"project '{currentLoadedProject?.Name}'" : "manual settings")}) and retrieved {tables.Count} table(s).";
                isConnectionSuccess = true;
            }
            else
            {
                connectionStatus = $"Connected (using {(isProjectLoaded ? $"project '{currentLoadedProject?.Name}'" : "manual settings")}), but no user tables were found.";
                isConnectionSuccess = true; // Connection itself was successful
            }
        }
        catch (Exception ex) // Catch exceptions thrown by GetTables
        {
            connectionStatus = $"Error connecting: {ex.Message}";
            if (ex.InnerException != null)
            {
                connectionStatus += $" Inner Exception: {ex.InnerException.Message}";
            }
            isConnectionSuccess = false;
        }
        await InvokeAsync(StateHasChanged); // Ensure UI updates after async operations
    }

    private async Task SelectTableAndLoadColumns(string tableName)
    {
        currentSelectedTable = tableName; // Assign first
        columnsForSelectedTable.Clear();
        selectedColumns.Clear();
        columnSelectionError = null;

        if (string.IsNullOrEmpty(currentSelectedTable)) // Now this check is meaningful
        {
            // This condition might not even be strictly necessary if tableName is always valid
            // but as a guard or if tableName could be empty from UI, it's okay.
            StateHasChanged();
            return;
        }

        string connectionStringForColumns;
        if (isProjectLoaded && currentLoadedProject?.DatabaseConnectionId != null)
        {
            var dbConn = await DbConnectionSvc.GetConnectionByIdAsync(currentLoadedProject.DatabaseConnectionId.Value);
            if (dbConn == null) {
                columnSelectionError = "Project's database connection not found for loading columns.";
                StateHasChanged();
                return;
            }
            connectionStringForColumns = dbConn.ConnectionString;
        }
        else if (!isProjectLoaded)
        {
            connectionStringForColumns = connectionDetails.BuildConnectionString();
        }
        else // Project loaded but no specific connection string (e.g. project has no DB)
        {
            columnSelectionError = "Cannot load columns: Project is loaded but has no configured database connection.";
            StateHasChanged();
            return;
        }

        try
        {
            columnsForSelectedTable = DbSchemaReader.GetColumns(connectionStringForColumns, currentSelectedTable);
            foreach (var column in columnsForSelectedTable)
            {
                selectedColumns.Add(column.ColumnName, true); // Default to select all columns initially
            }
        }
        catch (Exception ex)
        {
            columnSelectionError = $"Error loading columns for table '{currentSelectedTable}': {ex.Message}";
            if (ex.InnerException != null)
            {
                columnSelectionError += $" Inner: {ex.InnerException.Message}";
            }
        }
        StateHasChanged();
    }

    private void ToggleColumnSelection(string columnName)
    {
        if (selectedColumns.ContainsKey(columnName))
        {
            selectedColumns[columnName] = !selectedColumns[columnName];
            StateHasChanged();
        }
    }

    private void SelectAllColumns(bool select)
    {
        if (columnsForSelectedTable.Any())
        {
            foreach (var column in columnsForSelectedTable)
            {
                selectedColumns[column.ColumnName] = select;
            }
            StateHasChanged();
        }
    }

    private string generatedCode = "// Generated code will appear here.";

    private async Task HandleGenerateCode()
    {
        multipleGeneratedCodeResults.Clear(); // Clear previous results

        if (string.IsNullOrEmpty(currentSelectedTable) || !selectedColumns.Values.Any(isSelected => isSelected))
        {
            generatedCode = "// Please select a table and at least one column."; // Update status message
            StateHasChanged();
            return;
        }

        var columnsToGenerate = columnsForSelectedTable
                                  .Where(col => selectedColumns.ContainsKey(col.ColumnName) && selectedColumns[col.ColumnName])
                                  .ToList();
        if (!columnsToGenerate.Any())
        {
            generatedCode = "// No columns are selected for code generation."; // Update status message
            StateHasChanged();
            return;
        }

        List<CodeSnippet> snippetsToGenerate = new List<CodeSnippet>();
        if (snippetSelectionMode == "individual")
        {
            var selectedNames = individualSnippetSelectionState
                                .Where(kvp => kvp.Value)
                                .Select(kvp => kvp.Key)
                                .ToList();
            if (!selectedNames.Any())
            {
                generatedCode = "// No individual snippets selected."; // Update status message
                StateHasChanged();
                return;
            }
            // 'availableSnippets' is already correctly filtered (or not) by LoadSelectedProject
            snippetsToGenerate = availableSnippets.Where(s => selectedNames.Contains(s.Name)).ToList();
        }
        else // snippetSelectionMode == "sets"
        {
            if (!selectedSnippetSetIdsForGeneration.Any())
            {
                generatedCode = "// No snippet sets selected from the project."; // Update status message
                StateHasChanged();
                return;
            }

            var allGlobalSnippets = SnippetService.Snippets.ToList(); // Use the master list of all snippets
            HashSet<string> uniqueSnippetNamesFromSets = new HashSet<string>();

            foreach(var setId in selectedSnippetSetIdsForGeneration)
            {
                var setInfo = availableSnippetSetsForProject.FirstOrDefault(s => s.Id == setId); // These are already loaded
                if (setInfo != null)
                {
                    foreach(var nameInSet in setInfo.SnippetNames)
                    {
                        uniqueSnippetNamesFromSets.Add(nameInSet);
                    }
                }
            }

            if (!uniqueSnippetNamesFromSets.Any()) {
                generatedCode = "// Selected project snippet set(s) are empty or contain no valid snippet names."; // Update status message
                StateHasChanged();
                return;
            }
            snippetsToGenerate = allGlobalSnippets.Where(s => uniqueSnippetNamesFromSets.Contains(s.Name)).ToList();
        }

        if (!snippetsToGenerate.Any())
        {
            generatedCode = "// No snippets identified for generation based on current selection criteria."; // Update status message
            StateHasChanged();
            return;
        }

        foreach (var snippet in snippetsToGenerate)
        {
            string generatedOutput = CodeGenService.GenerateCode(
                currentSelectedTable,
                columnsToGenerate,
                snippet,
                currentNamespace ?? "",
                currentProgramName ?? ""
            );

            multipleGeneratedCodeResults.Add(new GeneratedCodeResult
            {
                SnippetName = snippet.Name,
                GeneratedContent = generatedOutput,
                SuggestedFileName = GenerateFileName(snippet, currentSelectedTable, currentProgramName, currentNamespace)
            });
        }

        if (multipleGeneratedCodeResults.Any())
        {
            generatedCode = $"// {multipleGeneratedCodeResults.Count} code snippet(s) generated. Displaying in modal.";
            isModalVisible = true; // Show the modal
        }
        else
        {
            generatedCode = "// No code generated or no snippets selected.";
            isModalVisible = false;
        }
        await InvokeAsync(StateHasChanged); // Ensure UI updates
    }

    private string GenerateFileName(CodeSnippet snippet, string? tableName, string? programName, string? namespaceVal)
    {
        string baseName = string.IsNullOrWhiteSpace(tableName) ? "Output" : CodeGenService.NormalizeClassName(tableName);
        string snippetNamePart = snippet.Name.Replace(" ", "").Replace("(", "").Replace(")", "").Replace("/", "-");

        string extension = ".txt"; // Default extension

        if (snippet.Name.Contains("C# Model", StringComparison.OrdinalIgnoreCase) || (snippet.Template.Contains("class ") && snippet.Template.Contains("namespace ")))
        {
            extension = ".cs";
        }
        else if (snippet.Name.Contains("Razor", StringComparison.OrdinalIgnoreCase) || snippet.Name.Contains("Blazor", StringComparison.OrdinalIgnoreCase))
        {
            extension = ".razor";
        }
        else if (snippet.Name.Contains("XML", StringComparison.OrdinalIgnoreCase))
        {
            extension = ".xml";
        }
        else if (snippet.Name.Contains("JSON", StringComparison.OrdinalIgnoreCase))
        {
            extension = ".json";
        }
        // Add more rules as needed

        return $"{baseName}_{snippetNamePart}{extension}";
    }

    // New methods for snippet selection
    private void HandleSnippetSelectionModeChange(string mode)
    {
        snippetSelectionMode = mode;
        if (mode == "individual")
        {
            selectedSnippetSetIdsForGeneration.Clear(); // Clear set selections if switching to individual
        }
        // Optionally, clear individual selections when switching to sets, or leave them.
        // else // mode == "sets"
        // {
        //     var keys = individualSnippetSelectionState.Keys.ToList();
        //     foreach (var key in keys)
        //     {
        //         individualSnippetSelectionState[key] = false;
        //     }
        // }
        StateHasChanged();
    }

    private void ToggleSnippetSetSelectionForGeneration(Guid setId)
    {
        if (selectedSnippetSetIdsForGeneration.Contains(setId))
        {
            selectedSnippetSetIdsForGeneration.Remove(setId);
        }
        else
        {
            selectedSnippetSetIdsForGeneration.Add(setId);
        }
        StateHasChanged();
    }

    private void ToggleIndividualSnippetSelection(string snippetName)
    {
        if (individualSnippetSelectionState.ContainsKey(snippetName))
        {
            individualSnippetSelectionState[snippetName] = !individualSnippetSelectionState[snippetName];
        }
        else
        {
            individualSnippetSelectionState[snippetName] = true;
        }
        StateHasChanged();
    }

    private void SelectAllIndividualSnippets(bool select)
    {
        // Use 'availableSnippets' as it's the source for the individual selection UI
        var snippetNames = availableSnippets.Select(s => s.Name).ToList();
        foreach (var name in snippetNames)
        {
            individualSnippetSelectionState[name] = select;
        }
        StateHasChanged();
    }


    // private async Task CopyToClipboard() // This was for the old textarea, modal has its own
    // {
    //     if (!string.IsNullOrEmpty(generatedCode))
    //     {
    //         await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", generatedCode);
    //     }
    // }

    // private async Task DownloadGeneratedCode() // This was for the old textarea, modal has its own
    // {
    //     // ... logic from before, now superseded by modal's download/zip functionality ...
    // }

    private void CloseGeneratedCodeModal()
    {
        isModalVisible = false;
        StateHasChanged();
    }
}
