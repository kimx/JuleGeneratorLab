@page "/generator"
@using JuleGeneratorLab.Services
@using JuleGeneratorLab.Models
@inject DatabaseSchemaReader DbSchemaReader
@inject CodeSnippetService SnippetService
@inject CodeGenerationService CodeGenService
@inject IJSRuntime JSRuntime
@inject ProjectService ProjectSvc
@inject DatabaseConnectionService DbConnectionSvc
@inject SnippetSetService SnippetSetSvc

<h3>Code Generator</h3>

<div class="container-fluid">
    <!-- Row 0: Project Selection -->
    <div class="row p-2 my-2 border rounded">
        <div class="col-12">
            <h4>Project Selection</h4>
            @if (availableProjects == null)
            {
                <p><em>Loading projects...</em></p>
            }
            else if (!availableProjects.Any())
            {
                <p>No projects available. Please create a project in the Project Manager.</p>
            }
            else
            {
                <div class="row">
                    <div class="col-md-6">
                        <label for="projectSelector" class="form-label">Select Project:</label>
                        <InputSelect id="projectSelector" class="form-select" @bind-Value="selectedProjectId">
                            <option value="">-- Select a Project --</option>
                            @foreach (var proj in availableProjects)
                            {
                                <option value="@proj.Id">@proj.Name</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col-md-6 align-self-end">
                        <button class="btn btn-info" @onclick="LoadSelectedProject" disabled="@(selectedProjectId == null || selectedProjectId == Guid.Empty)">
                            <i class="bi bi-folder-symlink me-1"></i> Load Project Details
                        </button>
                    </div>
                </div>
            }
            @if (!string.IsNullOrEmpty(projectLoadStatus))
            {
                <div class="mt-2 alert @(currentLoadedProject != null && isProjectLoaded ? "alert-success" : "alert-warning")">
                    @projectLoadStatus
                </div>
            }
        </div>
    </div>

    <!-- Row 1: Database Connection -->
    <div class="row p-2 my-2 border rounded">
        <div class="col-12">
            <h4>@(isProjectLoaded && currentLoadedProject != null ? $"Database Connection (from Project: {currentLoadedProject.Name})" : "Database Connection (Manual)")</h4>

            @if (!isProjectLoaded)
            {
                    <div class="mb-3">
                        <label for="serverName" class="form-label">Server Name</label>
                        <input type="text" class="form-control" id="serverName" @bind="connectionDetails.ServerName" />
                    </div>
                    <div class="mb-3">
                        <label for="databaseName" class="form-label">Database Name</label>
                        <input type="text" class="form-control" id="databaseName" @bind="connectionDetails.DatabaseName" />
                    </div>
                    <div class="mb-3">
                        <label for="authType" class="form-label">Authentication Type</label>
                        <select class="form-select" id="authType" @bind="connectionDetails.AuthenticationType">
                            <option value="windows">Windows Authentication</option>
                            <option value="sql">SQL Server Authentication</option>
                        </select>
                    </div>
                    @if (connectionDetails.AuthenticationType == "sql")
                    {
                        <div class="mb-3">
                            <label for="userName" class="form-label">User Name</label>
                            <input type="text" class="form-control" id="userName" @bind="connectionDetails.UserName" />
                        </div>
                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <input type="password" class="form-control" id="password" @bind="connectionDetails.Password" />
                        </div>
                    }
                    <button class="btn btn-success" @onclick="() => ConnectToDatabase(null)">Connect (Manual)</button>
            }
            @if (!string.IsNullOrEmpty(connectionStatus))
            {
                <div class="mt-2 alert @(isConnectionSuccess ? "alert-success" : "alert-danger")">
                            @connectionStatus
                        </div>
                    }
        </div>
    </div>

    <!-- Row 2: Main Area -->
    <div class="row p-2 my-2 border rounded">
        <!-- Column 1: Database Schema Explorer -->
        <div class="col-md-5 border-end">
            <h4>Database Schema</h4>
                    @if (tables.Any())
                    {
                        <div class="list-group" style="max-height: 300px; overflow-y: auto;">
                            @foreach (var table in tables)
                            {
                                <button type="button"
                                        class="list-group-item list-group-item-action @(currentSelectedTable == table ? "active" : "")"
                                        @onclick="() => SelectTableAndLoadColumns(table)">
                                    @table
                                </button>
                            }
                        </div>
                    }
                    else if (isConnectionSuccess)
                    {
                        <p>No tables found.</p>
                    }
                    else
                    {
                        <p>Connect to a database to see tables.</p>
                    }

                    @if (currentSelectedTable != null)
                    {
                        <h5 class="mt-3">Columns for @currentSelectedTable</h5>
                        @if (!string.IsNullOrEmpty(columnSelectionError))
                        {
                            <div class="alert alert-danger mt-2">@columnSelectionError</div>
                        }
                        @if (columnsForSelectedTable.Any())
                        {
                            <div class="list-group mt-2" style="max-height: 400px; overflow-y: auto;">
                                @foreach (var column in columnsForSelectedTable)
                                {
                                    <label class="list-group-item">
                                        <input type="checkbox" class="form-check-input me-1"
                                               checked="@(selectedColumns.ContainsKey(column.ColumnName) ? selectedColumns[column.ColumnName] : false)"
                                               @onchange="() => ToggleColumnSelection(column.ColumnName)" />
                                        @column.ColumnName <small class="text-muted">(@column.DataType @(column.IsPrimaryKey ? "PK" : "") @(column.IsNullable ? "?" : ""))</small>
                                    </label>
                                }
                            </div>
                            <button class="btn btn-sm btn-outline-secondary mt-2" @onclick="() => SelectAllColumns(true)">Select All</button>
                            <button class="btn btn-sm btn-outline-secondary mt-2" @onclick="() => SelectAllColumns(false)">Deselect All</button>
                        }
                        else if (string.IsNullOrEmpty(columnSelectionError))
                        {
                            <p>No columns found for this table or still loading.</p>
                        }
                    }
        </div>

        <!-- Column 2: Snippet Selection & Configuration -->
        <div class="col-md-7">
            <h4>Snippet Configuration</h4>
                    <div class="mb-3">
                        <label for="snippetSelector" class="form-label">Select Code Snippet:</label>
                        <select class="form-select" id="snippetSelector" @bind="selectedSnippetName">
                            @if (availableSnippets.Any())
                            {
                                @foreach (var snippet in availableSnippets)
                                {
                                    <option value="@snippet.Name">@snippet.Name - @snippet.Description</option>
                                }
                            }
                            else
                            {
                                <option value="">No snippets loaded</option>
                            }
                        </select>
                    </div>

                    @if (!string.IsNullOrEmpty(selectedSnippetName))
                    {
                        var selectedSnippet = availableSnippets.FirstOrDefault(s => s.Name == selectedSnippetName);
                        if (selectedSnippet != null)
                        {
                            <div class="mt-2">
                                <h6>Snippet Preview (Template):</h6>
                                <pre style="max-height: 200px; overflow-y: auto; background-color: #f8f9fa; border: 1px solid #dee2e6; padding: 10px; border-radius: 4px;"><code>@selectedSnippet.Template</code></pre>
                            </div>
                        }
                    }
                    <button class="btn btn-primary mt-2" @onclick="HandleGenerateCode">Generate Code</button>
        </div>
    </div>

    <!-- Row 3: Generated Code -->
    <div class="row p-2 my-2 border rounded">
        <div class="col-12">
            <h4>Generated Code</h4>
                    <textarea class="form-control" rows="10" readonly>@generatedCode</textarea>
                    <button class="btn btn-info mt-2" @onclick="CopyToClipboard">Copy to Clipboard</button>
                    <button class="btn btn-success mt-2" @onclick="DownloadGeneratedCode">Download as File</button>
        </div>
    </div>
</div>

@code {
    private ConnectionDetails connectionDetails = new ConnectionDetails();
    private string? connectionStatus;
    private bool isConnectionSuccess = false;
    private List<string> tables = new List<string>();

    // Project related properties
    private List<Project>? availableProjects;
    private Guid? selectedProjectId;
    private Project? currentLoadedProject;
    private string? projectLoadStatus;
    private bool isProjectLoaded = false;

    private string? currentSelectedTable;
    private List<ColumnDetail> columnsForSelectedTable = new List<ColumnDetail>();
    private Dictionary<string, bool> selectedColumns = new Dictionary<string, bool>(); // ColumnName -> IsSelected
    private string? columnSelectionError;

    private List<CodeSnippet> availableSnippets = new List<CodeSnippet>();
    private string? selectedSnippetName; // To store the name of the selected snippet

    protected override async Task OnInitializedAsync() // Changed from OnInitialized
    {
        await SnippetService.EnsureInitializedAsync(); // New line
        availableSnippets = SnippetService.Snippets;
        if (availableSnippets.Any())
        {
            selectedSnippetName = availableSnippets.First().Name; // Default to first snippet
        }

        try
        {
            availableProjects = await ProjectSvc.GetProjectsAsync();
        }
        catch (Exception ex)
        {
            projectLoadStatus = $"Error loading projects: {ex.Message}";
            availableProjects = new List<Project>();
        }

        // Any other async initialization logic can go here
        await base.OnInitializedAsync(); // Call base method
    }

    private async Task LoadSelectedProject()
    {
        projectLoadStatus = null;
        currentLoadedProject = null;
        isProjectLoaded = false;
        connectionStatus = null; // Clear previous manual connection status
        tables.Clear(); // Clear tables from previous connection
        currentSelectedTable = null;
        columnsForSelectedTable.Clear();
        selectedColumns.Clear();

        if (selectedProjectId == null || selectedProjectId == Guid.Empty)
        {
            projectLoadStatus = "Switched to manual mode. All snippets available.";
            currentLoadedProject = null;
            isProjectLoaded = false;
            availableSnippets = SnippetService.Snippets; // Show all snippets
            if (availableSnippets.Any() && (string.IsNullOrEmpty(selectedSnippetName) || !availableSnippets.Any(s => s.Name == selectedSnippetName)))
            {
                selectedSnippetName = availableSnippets.First().Name;
            }
            // Clear the DB schema view but leave manual connectionDetails fields as they are
            tables.Clear();
            currentSelectedTable = null;
            columnsForSelectedTable.Clear();
            selectedColumns.Clear();
            connectionStatus = "Manual mode. Please connect to a database.";
            isConnectionSuccess = false;
            StateHasChanged();
            return;
        }

        try
        {
            currentLoadedProject = await ProjectSvc.GetProjectByIdAsync(selectedProjectId.Value);
            if (currentLoadedProject == null)
            {
                projectLoadStatus = "Failed to load selected project details.";
                return;
            }

            isProjectLoaded = true; // Set this early after project is confirmed loaded
            projectLoadStatus = $"Project '{currentLoadedProject.Name}' loaded."; // Initial status

            if (currentLoadedProject.DatabaseConnectionId.HasValue && currentLoadedProject.DatabaseConnectionId.Value != Guid.Empty)
            {
                var dbConn = await DbConnectionSvc.GetConnectionByIdAsync(currentLoadedProject.DatabaseConnectionId.Value);
                if (dbConn != null)
                {
                    projectLoadStatus += $" Database connection '{dbConn.Name}' will be used.";
                    // Automatically connect using the project's connection string
                    await ConnectToDatabase(dbConn.ConnectionString);
                }
                else
                {
                    projectLoadStatus += $" Its associated database connection (ID: {currentLoadedProject.DatabaseConnectionId.Value}) could not be found. Please check DB Connections.";
                    // Clear DB specific views as connection is missing
                    tables.Clear();
                    currentSelectedTable = null;
                    columnsForSelectedTable.Clear();
                    selectedColumns.Clear();
                    connectionStatus = "Project's DB connection not found. Connect manually or update project.";
                    isConnectionSuccess = false;
                }
            }
            else
            {
                projectLoadStatus += " It does not have a database connection configured.";
                // Clear DB specific views as no DB is configured for project
                tables.Clear();
                currentSelectedTable = null;
                columnsForSelectedTable.Clear();
                selectedColumns.Clear();
                connectionStatus = "Project loaded has no DB connection. Connect manually or select another project.";
                isConnectionSuccess = false;
            }

            // Snippet Filtering Logic for Multiple Sets:
            if (currentLoadedProject.SelectedSnippetSetIds != null && currentLoadedProject.SelectedSnippetSetIds.Any())
            {
                var combinedSnippetNames = new HashSet<string>();
                List<string> foundSetNames = new List<string>();

                foreach (var setId in currentLoadedProject.SelectedSnippetSetIds)
                {
                    var snippetSet = await SnippetSetSvc.GetSnippetSetByIdAsync(setId);
                    if (snippetSet != null)
                    {
                        foundSetNames.Add(snippetSet.Name);
                        foreach (var snippetName in snippetSet.SnippetNames)
                        {
                            combinedSnippetNames.Add(snippetName);
                        }
                    }
                }

                if (combinedSnippetNames.Any())
                {
                    var allGlobalSnippets = SnippetService.Snippets;
                    availableSnippets = allGlobalSnippets.Where(s => combinedSnippetNames.Contains(s.Name)).ToList();
                    projectLoadStatus += $" Using snippet sets: '{string.Join(", ", foundSetNames)}' ({availableSnippets.Count} unique snippets).";
                    if (!availableSnippets.Any())
                    {
                        projectLoadStatus += " The selected snippet set(s) are empty or contain no matching loaded snippets.";
                    }
                }
                else
                {
                    projectLoadStatus += " Selected snippet set(s) not found or are empty. Showing all snippets.";
                    availableSnippets = SnippetService.Snippets; // Show all
                }
            }
            else
            {
                projectLoadStatus += " No specific snippet set selected. Showing all snippets.";
                availableSnippets = SnippetService.Snippets; // Show all
            }

            // Reset selected snippet if it's no longer in the (potentially filtered) list (this part is mostly the same)
            if (availableSnippets.Any())
            {
                if (string.IsNullOrEmpty(selectedSnippetName) || !availableSnippets.Any(s => s.Name == selectedSnippetName))
                {
                    selectedSnippetName = availableSnippets.First().Name;
                }
            }
            else
            {
                selectedSnippetName = null;
            }
        }
        catch (Exception ex)
        {
            projectLoadStatus = $"Error loading project: {ex.Message}";
            isProjectLoaded = false; // Ensure this is false on error
            availableSnippets = SnippetService.Snippets; // Revert to all snippets on error
             if (availableSnippets.Any() && (string.IsNullOrEmpty(selectedSnippetName) || !availableSnippets.Any(s => s.Name == selectedSnippetName)))
            {
                selectedSnippetName = availableSnippets.First().Name;
            }
        }
        StateHasChanged();
    }

    private class ConnectionDetails
    {
        public string ServerName { get; set; } = "localhost"; // Default value
        public string DatabaseName { get; set; } = "";
        public string AuthenticationType { get; set; } = "windows"; // Default to Windows Auth
        public string UserName { get; set; } = "";
        public string Password { get; set; } = "";

        public string BuildConnectionString()
        {
            if (AuthenticationType == "windows")
            {
                return $"Server={ServerName};Database={DatabaseName};Trusted_Connection=True;TrustServerCertificate=True;";
            }
            else // SQL Server Authentication
            {
                return $"Server={ServerName};Database={DatabaseName};User ID={UserName};Password={Password};TrustServerCertificate=True;";
            }
        }
    }

    private async Task ConnectToDatabase(string? connectionStringFromProject = null)
    {
        connectionStatus = "Connecting...";
        isConnectionSuccess = false;
        tables.Clear();
        currentSelectedTable = null;
        columnsForSelectedTable.Clear();
        selectedColumns.Clear();
        columnSelectionError = null;
        string connectionString;

        if (isProjectLoaded && !string.IsNullOrEmpty(connectionStringFromProject))
        {
            connectionString = connectionStringFromProject;
            // Update display fields for connectionDetails to reflect project's settings (optional, if shown)
            // This might be complex if parsing is needed. For now, status messages will indicate project use.
            // connectionDetails.ServerName = "Using Project Connection";
            // connectionDetails.DatabaseName = ""; // Clear manual fields or mark as from project
        }
        else if (!isProjectLoaded) // Only build from manual details if not in project mode or project connection string is missing
        {
            connectionString = connectionDetails.BuildConnectionString();
        }
        else // isProjectLoaded but connectionStringFromProject is null/empty (e.g. project has no DB configured)
        {
            connectionStatus = "Project is loaded, but no database connection string was provided by the project. Cannot connect.";
            isConnectionSuccess = false;
            StateHasChanged();
            return;
        }


        try
        {
            var fetchedTables = DbSchemaReader.GetTables(connectionString);

            if (fetchedTables != null && fetchedTables.Any())
            {
                tables = fetchedTables;
                string dbName = isProjectLoaded ? (currentLoadedProject?.Name ?? "project") : connectionDetails.DatabaseName;
                connectionStatus = $"Successfully connected (using {(isProjectLoaded ? $"project '{currentLoadedProject?.Name}'" : "manual settings")}) and retrieved {tables.Count} table(s).";
                isConnectionSuccess = true;
            }
            else
            {
                connectionStatus = $"Connected (using {(isProjectLoaded ? $"project '{currentLoadedProject?.Name}'" : "manual settings")}), but no user tables were found.";
                isConnectionSuccess = true; // Connection itself was successful
            }
        }
        catch (Exception ex) // Catch exceptions thrown by GetTables
        {
            connectionStatus = $"Error connecting: {ex.Message}";
            if (ex.InnerException != null)
            {
                connectionStatus += $" Inner Exception: {ex.InnerException.Message}";
            }
            isConnectionSuccess = false;
        }
        await InvokeAsync(StateHasChanged); // Ensure UI updates after async operations
    }

    private async Task SelectTableAndLoadColumns(string tableName)
    {
        currentSelectedTable = tableName; // Assign first
        columnsForSelectedTable.Clear();
        selectedColumns.Clear();
        columnSelectionError = null;

        if (string.IsNullOrEmpty(currentSelectedTable)) // Now this check is meaningful
        {
            // This condition might not even be strictly necessary if tableName is always valid
            // but as a guard or if tableName could be empty from UI, it's okay.
            StateHasChanged();
            return;
        }

        string connectionStringForColumns;
        if (isProjectLoaded && currentLoadedProject?.DatabaseConnectionId != null)
        {
            var dbConn = await DbConnectionSvc.GetConnectionByIdAsync(currentLoadedProject.DatabaseConnectionId.Value);
            if (dbConn == null) {
                columnSelectionError = "Project's database connection not found for loading columns.";
                StateHasChanged();
                return;
            }
            connectionStringForColumns = dbConn.ConnectionString;
        }
        else if (!isProjectLoaded)
        {
            connectionStringForColumns = connectionDetails.BuildConnectionString();
        }
        else // Project loaded but no specific connection string (e.g. project has no DB)
        {
            columnSelectionError = "Cannot load columns: Project is loaded but has no configured database connection.";
            StateHasChanged();
            return;
        }

        try
        {
            columnsForSelectedTable = DbSchemaReader.GetColumns(connectionStringForColumns, currentSelectedTable);
            foreach (var column in columnsForSelectedTable)
            {
                selectedColumns.Add(column.ColumnName, true); // Default to select all columns initially
            }
        }
        catch (Exception ex)
        {
            columnSelectionError = $"Error loading columns for table '{currentSelectedTable}': {ex.Message}";
            if (ex.InnerException != null)
            {
                columnSelectionError += $" Inner: {ex.InnerException.Message}";
            }
        }
        StateHasChanged();
    }

    private void ToggleColumnSelection(string columnName)
    {
        if (selectedColumns.ContainsKey(columnName))
        {
            selectedColumns[columnName] = !selectedColumns[columnName];
            StateHasChanged();
        }
    }

    private void SelectAllColumns(bool select)
    {
        if (columnsForSelectedTable.Any())
        {
            foreach (var column in columnsForSelectedTable)
            {
                selectedColumns[column.ColumnName] = select;
            }
            StateHasChanged();
        }
    }

    private string generatedCode = "// Generated code will appear here.";

    private async Task HandleGenerateCode()
    {
        if (string.IsNullOrEmpty(currentSelectedTable) ||
            !selectedColumns.Values.Any(isSelected => isSelected) || // Check if any column is actually selected
            string.IsNullOrEmpty(selectedSnippetName))
        {
            generatedCode = "// Please select a table, at least one column, and a snippet first.";
            return;
        }

        var snippetToUse = availableSnippets.FirstOrDefault(s => s.Name == selectedSnippetName);
        if (snippetToUse == null)
        {
            generatedCode = "// Selected snippet not found.";
            return;
        }

        // Get only the details of columns that are marked as true in selectedColumns
        var columnsToGenerate = columnsForSelectedTable
                                  .Where(col => selectedColumns.ContainsKey(col.ColumnName) && selectedColumns[col.ColumnName])
                                  .ToList();

        if (!columnsToGenerate.Any())
        {
             generatedCode = "// No columns are selected for code generation.";
            return;
        }

        generatedCode = CodeGenService.GenerateCode(currentSelectedTable, columnsToGenerate, snippetToUse);
        await InvokeAsync(StateHasChanged);
    }

    private async Task CopyToClipboard()
    {
        if (!string.IsNullOrEmpty(generatedCode))
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", generatedCode);
            // Optionally, show a temporary message like "Copied!"
        }
    }

    private async Task DownloadGeneratedCode()
    {
        if (string.IsNullOrEmpty(generatedCode) || generatedCode.StartsWith("//")) // Avoid downloading placeholder/error messages
        {
            // Optionally, inform the user that there's nothing valid to download
            // For example, by setting a temporary status message
            return;
        }

        var snippetToUse = availableSnippets.FirstOrDefault(s => s.Name == selectedSnippetName);
        string fileName = "GeneratedCode.txt"; // Default filename

        if (snippetToUse != null)
        {
            string baseName = string.IsNullOrEmpty(currentSelectedTable) ? "MyCode" : CodeGenService.NormalizeClassName(currentSelectedTable);
            if (snippetToUse.Name.Contains("C# Model"))
            {
                fileName = $"{baseName}.cs";
            }
            else if (snippetToUse.Name.Contains("Blazor") || snippetToUse.Name.Contains("Razor"))
            {
                fileName = $"{baseName}Component.razor"; // Or derive more specifically
            }
            // Add more specific filename logic based on snippet type if desired
        }

        // Convert string to byte array
        byte[] fileBytes = System.Text.Encoding.UTF8.GetBytes(generatedCode);

        // Invoke JavaScript to trigger download
        // Create a helper JS function if this becomes complex or repeated
        // For a single use like this, direct invocation is fine.
        var base64 = Convert.ToBase64String(fileBytes);
        await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, $"data:application/octet-stream;base64,{base64}");
    }
}
