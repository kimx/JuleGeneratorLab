@using JuleGeneratorLab.Models
@inject IJSRuntime JSRuntime

@if (IsVisible && Results != null && Results.Any())
{
    <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Generated Code</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    @if (Results.Count == 1) // Simplified view if only one result
                    {
                        var singleResult = Results.First();
                        <div class="mb-2">
                            <strong>File: @singleResult.SuggestedFileName</strong>
                        </div>
                        <textarea class="form-control" rows="15" readonly>@singleResult.GeneratedContent</textarea>
                        <div class="mt-2">
                            <button class="btn btn-sm btn-outline-secondary me-1" @onclick="() => CopyToClipboard(singleResult.GeneratedContent)">Copy</button>
                            <button class="btn btn-sm btn-primary" @onclick="() => DownloadFile(singleResult)">Download</button>
                        </div>
                    }
                    else // Tabbed view for multiple results
                    {
                        <ul class="nav nav-tabs" id="generatedCodeTabs" role="tablist">
                            @for (int i = 0; i < Results.Count; i++)
                            {
                                var result = Results[i];
                                var tabId = $"tab-{i}";
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link @(i == activeTabIndex ? "active" : "")"
                                            id="@($"btn-{tabId}")"
                                            type="button"
                                            role="tab"
                                            aria-controls="@tabId"
                                            aria-selected="@(i == activeTabIndex ? "true" : "false")"
                                            @onclick="() => SetActiveTab(i)">
                                        @result.SuggestedFileName
                                    </button>
                                </li>
                            }
                        </ul>
                        <div class="tab-content" id="generatedCodeTabsContent">
                            @for (int i = 0; i < Results.Count; i++)
                            {
                                var result = Results[i];
                                var tabId = $"tab-{i}";
                                <div class="tab-pane fade @(i == activeTabIndex ? "show active" : "")"
                                     id="@tabId"
                                     role="tabpanel"
                                     aria-labelledby="@($"btn-{tabId}")">
                                    <div class="mt-2 p-2 border rounded">
                                        <textarea class="form-control" rows="15" readonly>@result.GeneratedContent</textarea>
                                        <div class="mt-2">
                                            <button class="btn btn-sm btn-outline-secondary me-1" @onclick="() => CopyToClipboard(result.GeneratedContent)">Copy Active Tab</button>
                                            <button class="btn btn-sm btn-primary" @onclick="() => DownloadFile(result)">Download Active Tab</button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                    @if (Results.Count > 1)
                    {
                        <button type="button" class="btn btn-success" @onclick="DownloadAllAsZip">Download All as ZIP</button>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public List<Models.GeneratedCodeResult> Results { get; set; } = new List<Models.GeneratedCodeResult>();
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private int activeTabIndex = 0;

    protected override void OnParametersSet()
    {
        if (IsVisible && Results != null && Results.Any())
        {
            activeTabIndex = 0; // Reset to first tab when modal becomes visible or results change
        }
    }

    private void SetActiveTab(int index)
    {
        activeTabIndex = index;
    }

    private async Task CloseModal()
    {
        await OnClose.InvokeAsync();
    }

    private async Task CopyToClipboard(string text)
    {
        if (!string.IsNullOrEmpty(text))
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        }
    }

    private async Task DownloadFile(Models.GeneratedCodeResult result)
    {
        if (string.IsNullOrEmpty(result.GeneratedContent)) return;
        byte[] fileBytes = System.Text.Encoding.UTF8.GetBytes(result.GeneratedContent);
        var base64 = Convert.ToBase64String(fileBytes);
        // Assumes 'saveAsFile' is globally available from wwwroot/js/textUtils.js
        await JSRuntime.InvokeVoidAsync("saveAsFile", result.SuggestedFileName, $"data:application/octet-stream;base64,{base64}");
    }

    private async Task DownloadAllAsZip()
    {
        if (Results == null || !Results.Any())
        {
            await JSRuntime.InvokeVoidAsync("alert", "No files to zip.");
            return;
        }

        var filesToZip = Results.Select(r => new { name = r.SuggestedFileName, content = r.GeneratedContent }).ToList();

        string zipFileName = "GeneratedCode.zip";

        await JSRuntime.InvokeVoidAsync("createAndDownloadZip", filesToZip, zipFileName);
    }
}
